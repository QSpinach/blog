<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QSpinach&#39;blog</title>
  <icon>https://www.gravatar.com/avatar/ecfcf292bc552e27dd4d05349f3a408c</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://qspinach.github.io/blog/"/>
  <updated>2021-02-01T11:32:51.434Z</updated>
  <id>https://qspinach.github.io/blog/</id>
  
  <author>
    <name>QSpinach</name>
    <email>731044462@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac使用问题汇总</title>
    <link href="https://qspinach.github.io/blog/2020/10/19/mac%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://qspinach.github.io/blog/2020/10/19/mac使用问题汇总/</id>
    <published>2020-10-19T03:01:56.307Z</published>
    <updated>2021-02-01T11:32:51.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac使用问题汇总"><a href="#mac使用问题汇总" class="headerlink" title="mac使用问题汇总"></a>mac使用问题汇总</h1><h3 id="如何安装nginx"><a href="#如何安装nginx" class="headerlink" title="如何安装nginx"></a>如何安装nginx</h3><p>安装homebrew，使用brew安装nginx<br>查看是否安装nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search nginx</span><br></pre></td></tr></table></figure><p>安装ginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>nginx安装路径<code>/usr/local/etc/nginx/</code><br>启动nginx，默认访问8080端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>关闭nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h3 id="如何安装homebrew"><a href="#如何安装homebrew" class="headerlink" title="如何安装homebrew"></a>如何安装homebrew</h3><p>国内安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>官方安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>也可以加速克隆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO=&quot;https://github.com/Homebrew/brew&quot;</span><br><span class="line"># 变成：</span><br><span class="line">BREW_REPO=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br></pre></td></tr></table></figure><p>其他镜像安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># brew 程序本身，Homebrew/Linuxbrew 相同</span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"># 以下针对 mac OS 系统上的 Homebrew</span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line"></span><br><span class="line"># 以下针对 Linux 系统上的 Linuxbrew</span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/linuxbrew-core.git</span><br><span class="line"></span><br><span class="line"># 更换后测试工作是否正常</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># brew 程序本身，Homebrew/Linuxbrew 相同</span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"># 以下针对 mac OS 系统上的 Homebrew</span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-fonts.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-drivers.git</span><br><span class="line"></span><br><span class="line"># 以下针对 Linux 系统上的 Linuxbrew</span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/linuxbrew-core.git</span><br><span class="line"></span><br><span class="line"># 更换后测试工作是否正常</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="如何展示隐藏文件及文件夹"><a href="#如何展示隐藏文件及文件夹" class="headerlink" title="如何展示隐藏文件及文件夹"></a>如何展示隐藏文件及文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 关闭显示隐藏文件的话就把上面的命令中YES改为NO就行了</span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h3 id="安装-webstorm-2020-3-2"><a href="#安装-webstorm-2020-3-2" class="headerlink" title="安装 webstorm 2020.3.2"></a>安装 webstorm 2020.3.2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 删除配置信息目录</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Preferences/WebStorm*</span><br><span class="line"></span><br><span class="line"># 删除插件信息目录</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Application\ Support/WebStorm*</span><br><span class="line"></span><br><span class="line"># 缓存信息目录</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Caches/WebStorm*</span><br><span class="line"></span><br><span class="line"># 删除日志信息目录</span><br><span class="line"></span><br><span class="line">rm -rf ~/Library/Logs/WebStorm*</span><br><span class="line"></span><br><span class="line"># 删除Webstorm.vmoptions</span><br><span class="line">cd /Users/leitianxiao/Library/Application\ Support//JetBrains/Webstorm2020.2/Webstorm.vmoptions</span><br><span class="line"></span><br><span class="line">rm -f  Webstorm.vmoptions</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mac使用问题汇总&quot;&gt;&lt;a href=&quot;#mac使用问题汇总&quot; class=&quot;headerlink&quot; title=&quot;mac使用问题汇总&quot;&gt;&lt;/a&gt;mac使用问题汇总&lt;/h1&gt;&lt;h3 id=&quot;如何安装nginx&quot;&gt;&lt;a href=&quot;#如何安装nginx&quot; class
      
    
    </summary>
    
    
    
      <category term="MAC" scheme="https://qspinach.github.io/blog/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>搭建vue项目</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/搭建vue项目/</id>
    <published>2020-08-23T15:45:11.821Z</published>
    <updated>2020-08-23T15:45:11.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建VUE项目"><a href="#搭建VUE项目" class="headerlink" title="搭建VUE项目"></a>搭建VUE项目</h1><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>本文档用于总结VUE项目的搭建及使用，基于不同的UI搭建原理其实是一样的。以Vant为例简单概述从项目创建到打包部署过程中需要注意的内容。</p><h3 id="推荐UI"><a href="#推荐UI" class="headerlink" title="推荐UI"></a>推荐UI</h3><p>​        移动端：<a href="https://youzan.github.io/vant/#/zh-CN?_blank" target="_blank" rel="noopener">vant-ui</a>、<a href="https://didi.github.io/cube-ui/#/zh-CN/docs/quick-start?_blank" target="_blank" rel="noopener">cube-ui</a></p><p>​        PC端：<a href="https://element.eleme.cn/#/zh-CN/component/installation?_blank" target="_blank" rel="noopener">element-ui</a>、<a href="https://www.iviewui.com/docs/introduce?_blank" target="_blank" rel="noopener">iView</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm</a>(node版本管理工具)</li><li>npm || yarn （包管理工具，高版本nodejs可能需要手动安装npm）</li><li><a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">nodejs</a>（运行环境）</li></ol><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>以<code>vant-ui</code>为例子搭建，使用 Vue 官方提供的脚手架 <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">Vue Cli 3</a> 创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Vue Cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个项目</span></span><br><span class="line">vue create hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建完成后，可以通过命令打开图形化界面，如下图所示</span></span><br><span class="line">vue ui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 npm 安装</span></span><br><span class="line">npm i vant -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 yarn 安装</span></span><br><span class="line">yarn add vant</span><br></pre></td></tr></table></figure><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">│  .env.development</span><br><span class="line">│  .env.production</span><br><span class="line">│  .env.sit</span><br><span class="line">│  .env.uat</span><br><span class="line">│  .eslintrc.js</span><br><span class="line">│  .gitignore</span><br><span class="line">│  babel.config.js</span><br><span class="line">│  Dockerfile</span><br><span class="line">│  nginx.conf</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  vue.config.js</span><br><span class="line">│  yarn.lock</span><br><span class="line">│  </span><br><span class="line">├─public</span><br><span class="line">│  │  favicon.ico</span><br><span class="line">│  │  index.html</span><br><span class="line">│  │  </span><br><span class="line">│  └─svg</span><br><span class="line">│          loading-spin.svg</span><br><span class="line">│          </span><br><span class="line">└─src</span><br><span class="line">    │  App.vue</span><br><span class="line">    │  error.js</span><br><span class="line">    │  main.js</span><br><span class="line">    │  permission.js</span><br><span class="line">    │  vant-ui.js</span><br><span class="line">    │  </span><br><span class="line">    ├─api</span><br><span class="line">    │      index.js</span><br><span class="line">    │      login.js</span><br><span class="line">    │      user.js</span><br><span class="line">    │      </span><br><span class="line">    ├─assets</span><br><span class="line">    │    back.png</span><br><span class="line">    │    login.jpg</span><br><span class="line">    │    logo.png</span><br><span class="line">    │          </span><br><span class="line">    ├─components</span><br><span class="line">    │  └─404</span><br><span class="line">    │          index.vue</span><br><span class="line">    │          </span><br><span class="line">    ├─configs</span><br><span class="line">    │      apiURL.js</span><br><span class="line">    │      errorCode.js</span><br><span class="line">    │      index.js</span><br><span class="line">    │      </span><br><span class="line">    ├─routers</span><br><span class="line">    │  │  index.js</span><br><span class="line">    │  │  </span><br><span class="line">    │  └─modules</span><br><span class="line">    │          default.js</span><br><span class="line">    │          </span><br><span class="line">    ├─stores</span><br><span class="line">    │  │  getters.js</span><br><span class="line">    │  │  index.js</span><br><span class="line">    │  │  </span><br><span class="line">    │  └─modules</span><br><span class="line">    │          permission.js</span><br><span class="line">    │          user.js</span><br><span class="line">    │          </span><br><span class="line">    ├─styles</span><br><span class="line">    │      transition.css</span><br><span class="line">    │      </span><br><span class="line">    ├─utils</span><br><span class="line">    │      auth.js</span><br><span class="line">    │      index.js</span><br><span class="line">    │      request.js</span><br><span class="line">    │      validate.js</span><br><span class="line">    │      </span><br><span class="line">    └─views</span><br><span class="line">        │              </span><br><span class="line">        ├─home</span><br><span class="line">        │      Home.vue</span><br><span class="line">        │      Home2.vue</span><br><span class="line">        │      </span><br><span class="line">        ├─login</span><br><span class="line">        │      Login.vue</span><br><span class="line">        │      </span><br><span class="line">        └─test</span><br><span class="line">               Test.vue</span><br></pre></td></tr></table></figure><h4 id="添加适配方案"><a href="#添加适配方案" class="headerlink" title="添加适配方案"></a>添加适配方案</h4><h5 id="Rem-适配"><a href="#Rem-适配" class="headerlink" title="Rem 适配"></a>Rem 适配</h5><p>Vant 中的样式默认使用<code>px</code>作为单位，如果需要使用<code>rem</code>单位，推荐使用以下两个工具：</p><ul><li><p><a href="https://github.com/cuth/postcss-pxtorem" target="_blank" rel="noopener">postcss-pxtorem</a> 是一款 postcss 插件，用于将单位转化为 rem</p></li><li><p><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a> 用于设置 rem 基准值</p><p>在vue.config.js中配置即可完成适配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          autoprefixer(),</span><br><span class="line">          pxtorem(&#123;</span><br><span class="line">            rootValue: <span class="number">37.5</span>,</span><br><span class="line">            propList: [<span class="string">'*'</span>]</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><h4 id="开发代理"><a href="#开发代理" class="headerlink" title="开发代理"></a>开发代理</h4><p>方便开发对接接口及方便管理使用代理，生产可使用nginx做代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 设置主机地址</span></span><br><span class="line">    <span class="comment">// host: 'localhost',</span></span><br><span class="line">    <span class="comment">// 设置默认端口</span></span><br><span class="line">    port: <span class="number">8000</span>,</span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">'/v2'</span>: &#123;</span><br><span class="line">          <span class="comment">// 目标 API 地址</span></span><br><span class="line">          target: <span class="string">'http://rap2api.taobao.org'</span>,</span><br><span class="line">          <span class="comment">// 如果要代理 websockets</span></span><br><span class="line">          ws: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 将主机标头的原点更改为目标URL</span></span><br><span class="line">          <span class="comment">// changeOrigin: true,</span></span><br><span class="line">          pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/v2'</span>: <span class="string">'/app/mock'</span>    <span class="comment">//代理的路径</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="优化引用三方库"><a href="#优化引用三方库" class="headerlink" title="优化引用三方库"></a>优化引用三方库</h4><p>使用webpack-bundle-analyzer可以查看各部分打包后的大小，如果太大需要做特殊引用。</p><p>在index.html中引用三方库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//shadow.elemecdn.com/npm/vue@2.6.10/dist/vue.runtime&lt;%= process.env.NODE_ENV === 'production' ? '.min.js' : '.js' %&gt;"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//shadow.elemecdn.com/npm/vue-router@3.0.3/dist/vue-router&lt;%= process.env.NODE_ENV === 'production' ? '.min.js' : '.js' %&gt;"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue.config.js中配置三方库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">      <span class="comment">// 其他 plugins ...</span></span><br><span class="line">    ],</span><br><span class="line">    externals: &#123;</span><br><span class="line">      vue: <span class="string">"window.Vue"</span>,</span><br><span class="line">      <span class="string">"vue-router"</span>: <span class="string">"window.VueRouter"</span></span><br><span class="line">      <span class="comment">// 其他三方库 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="静态变量及环境变量"><a href="#静态变量及环境变量" class="headerlink" title="静态变量及环境变量"></a>静态变量及环境变量</h4><p>根据不同的启动命令获取不同的环境变量值，在package.json中配置运行命令执行不同命令会使用不同文件下定义的变量。例如：.env.development、.env.production、.env.sit、.env.uat文件中，默认yarn dev使用development，yarn build使用production，还可以自己添加sit和uat。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"npm run serve"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="string">"sit"</span>: <span class="string">"vue-cli-service build --mode sit"</span>,</span><br><span class="line">    <span class="string">"uat"</span>: <span class="string">"vue-cli-service build --mode uat"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在.env.development中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'development'</span></span><br><span class="line">VUE_APP_CURRENTMODE=<span class="string">'development'</span></span><br><span class="line">VUE_APP_BASEURL=<span class="string">'http://127.0.0.1:8001'</span></span><br></pre></td></tr></table></figure><p>在.env.production中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">'production'</span></span><br><span class="line">VUE_APP_CURRENTMODE=<span class="string">'production'</span></span><br><span class="line">VUE_APP_BASEURL=<span class="string">'http://127.0.0.1:8002'</span></span><br></pre></td></tr></table></figure><p>在代码中的使用变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = process.env.VUE_APP_BASEURL</span><br></pre></td></tr></table></figure><p>静态变量定义在指定文件中，使用时即可引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置静态变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 路由白名单</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [</span><br><span class="line">  <span class="string">'/login'</span>, <span class="comment">// 登录</span></span><br><span class="line">  <span class="string">'/404'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> baseUrl = process.env.VUE_APP_BASEURL</span><br><span class="line"><span class="keyword">const</span> imgUrl = baseUrl <span class="comment">// 图片服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  whiteList,</span><br><span class="line">  imgUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工具文件"><a href="#工具文件" class="headerlink" title="工具文件"></a>工具文件</h4><ol><li><p>自定义request.js封装axios作为调用接口工具。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回其他状态吗</span></span><br><span class="line">service.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理请求头</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isToken = (config.headers || &#123;&#125;).isToken === <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> token =  store.getters.access_token <span class="comment">// 可以根据vuex或者storage获取</span></span><br><span class="line">  <span class="keyword">if</span> (token &amp;&amp; !isToken) &#123;</span><br><span class="line">    config.headers[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token <span class="comment">// token</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 处理返回信息</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="built_in">Number</span>(res.status) || <span class="number">200</span></span><br><span class="line">  <span class="keyword">const</span> message = res.data.error_description || errorCode[status] || errorCode[<span class="string">'default'</span>]</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO 登出</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(status === <span class="number">200</span> || status === <span class="number">204</span>)) &#123;</span><br><span class="line">    <span class="comment">// TODO 提示错误信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(message))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在调用接口时候即可使用request工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">import</span> &#123; apiUrl &#125; <span class="keyword">from</span> <span class="string">'@/configs/apiURL'</span></span><br><span class="line"><span class="keyword">const</span> login = apiUrl.login</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoginByMobile = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: login.doLogin,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    type: <span class="string">'json'</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想为了方便管理接口地址，可以将接口地址统一管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">"/v1"</span> <span class="comment">// 代理地址</span></span><br><span class="line"><span class="keyword">const</span> baseUrlMock = <span class="string">"/v2"</span> <span class="comment">// mock地址</span></span><br><span class="line"><span class="keyword">const</span> apiUrlFn = <span class="function">(<span class="params">baseUrl</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    login: &#123;</span><br><span class="line">      doLogin: baseUrl + <span class="string">"/app/login"</span>, <span class="comment">// 登录</span></span><br><span class="line">      doLogout: baseUrl + <span class="string">"/app/logout"</span> <span class="comment">// 登出</span></span><br><span class="line">    &#125;,</span><br><span class="line">    user: &#123;</span><br><span class="line">      getUserInfo: baseUrlMock + <span class="string">"/app/userinfo"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> apiUrl = apiUrlFn(baseUrl);</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  baseUrl,</span><br><span class="line">  baseUrlMock,</span><br><span class="line">  apiUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   根据不同状态码提示不同的信息，可以做一个errorCode静态变量对象</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">'401'</span>: <span class="string">'当前操作没有权限'</span>,</span><br><span class="line">  <span class="string">'default'</span>: <span class="string">'系统未知错误,请反馈给管理员'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>自定义validate.js作为数据校验工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 大小写字母*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAlphabets</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Za-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 小写字母*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateLowerCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[a-z]+$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>自定义auth.js作为存储登录token工具（可以用cookie，sessionStorage，localStorage）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"><span class="keyword">const</span> TokenKey = <span class="string">'Token'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.get(TokenKey)</span><br><span class="line">  <span class="comment">// return sessionStorage.getItem(TokenKey)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return Cookies.set(TokenKey, token, &#123;expires: 0.001&#125;) // 过期时间一分多钟</span></span><br><span class="line">  <span class="keyword">return</span> Cookies.set(TokenKey, token, &#123;<span class="attr">expires</span>: <span class="number">7</span>&#125;) <span class="comment">// 过期时间7天</span></span><br><span class="line">  <span class="comment">// return sessionStorage.setItem(TokenKey, token)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.remove(TokenKey)</span><br><span class="line">  <span class="comment">// return sessionStorage.removeItem(TokenKey)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义其他一些好用的数据处理工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取地址栏参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>); <span class="comment">//构造一个含有目标参数的正则表达式对象</span></span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);  <span class="comment">//匹配目标参数</span></span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//返回参数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录与微信登录"><a href="#登录与微信登录" class="headerlink" title="登录与微信登录"></a>登录与微信登录</h3><p>登录需用到vuex和storage以便存储和获取登录用户信息</p><p>在store中定义user</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">    user: <span class="string">''</span>,</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    token: getToken(),</span><br><span class="line">    roles: [],</span><br><span class="line">  &#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line">    LoginByMobile(&#123;commit&#125;, userinfo)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         login.LoginByMobile(userinfo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> &#123; code, msg, token &#125; = response.data</span><br><span class="line">           <span class="keyword">if</span> (code != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">// TODO 提示登录失败</span></span><br><span class="line">             reject(<span class="string">"登录失败"</span>)</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           commit(<span class="string">'SET_TOKEN'</span>, token)</span><br><span class="line">           commit(<span class="string">'SET_NAME'</span>, <span class="string">""</span>)</span><br><span class="line">           setToken(token)</span><br><span class="line">           resolve(response)</span><br><span class="line">         &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">           reject(error)</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line">    GetUserInfo(&#123; commit, state &#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve();</span><br><span class="line">            userApi.getInfo()</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; result, msg, code &#125; = res;</span><br><span class="line">                <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</span><br><span class="line">                    commit(<span class="string">'SET_NAME'</span>, result.name)</span><br><span class="line">                    commit(<span class="string">'SET_ID'</span>, result.id)</span><br><span class="line">                    commit(<span class="string">'SET_ROLES'</span>, result.roles)</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(<span class="string">'error'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                reject(<span class="string">'error'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在页面定义登录点击事件调用LoginByMobile即可。登录后获取token存入vuex和storage，再获取用户信息存入vuex。</p><p>如果是手机端微信登录需要使用openid（微信用户与公众号之间的唯一标识）登录。这里需用到微信的<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">jssdk</a>配合后台接口获取openid。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getToken()) &#123; <span class="comment">// 验证是否含有token</span></span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">        next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">        NProgress.done()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">            store.dispatch(<span class="string">'GetUserInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">                <span class="keyword">const</span> roles = res.result.roles <span class="comment">// ['user','admin']</span></span><br><span class="line">                store.dispatch(<span class="string">'GenerateRoutes'</span>, &#123; roles &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">                    router.addRoutes(store.getters.addRouters) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">                    next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = getUrlParam(<span class="string">'code'</span>)</span><br><span class="line">    <span class="keyword">const</span> openid = sessionStorage.getItem(<span class="string">'openid'</span>)</span><br><span class="line">    <span class="keyword">if</span> (code &amp;&amp; !openid) &#123;</span><br><span class="line">        <span class="comment">// 获取openid</span></span><br><span class="line">        login.getUserOpenId(&#123;</span><br><span class="line">            code: code</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code == <span class="number">0</span>) &#123;</span><br><span class="line">                sessionStorage.setItem(<span class="string">'openid'</span>, res.openId)</span><br><span class="line">                <span class="keyword">if</span> (res.token) &#123;</span><br><span class="line">                    store.dispatch(<span class="string">'LoginSetToken'</span>, &#123;<span class="attr">token</span>: res.token&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">                        setToken(res.token)</span><br><span class="line">                        next()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    next(<span class="string">`/login`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">                    NProgress.done()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!openid) &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=<span class="subst">$&#123;AppId&#125;</span>&amp;redirect_uri=http%3a%2f%2xx.xxx.com&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* has no token*/</span></span><br><span class="line">            <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">                next()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next(<span class="string">`/login`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">                NProgress.done()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="路由权限"><a href="#路由权限" class="headerlink" title="路由权限"></a>路由权限</h4><p>做路由权限有两种，一种是动态路由，一种是静态路由。动态路由信息完全由后台数据库存储，通过接口去获取数据。静态路由则完全由前端控制，可通过不同角色去过滤路由。</p><p>静态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* router.js */</span></span><br><span class="line"><span class="keyword">const</span> RouterDefault = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home1'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/home/Home.vue'</span>), <span class="comment">// 普通用户</span></span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span>, <span class="attr">keepAlive</span>: <span class="literal">true</span>, <span class="attr">noCache</span>: <span class="literal">false</span>, <span class="attr">roles</span>: [<span class="string">"user"</span>] &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'other'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/a_otherRoles/leader/home/index.vue'</span>), <span class="comment">// 其他用户</span></span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span>, <span class="attr">keepAlive</span>: <span class="literal">true</span>, <span class="attr">noCache</span>: <span class="literal">false</span>, <span class="attr">roles</span>: [<span class="string">"other"</span>] &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>过滤函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归过滤异步路由表，返回符合用户角色权限的路由表</span></span><br><span class="line"><span class="comment"> * @param routes asyncRouterMap</span></span><br><span class="line"><span class="comment"> * @param roles</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRouter</span>(<span class="params">routes, roles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRouter(tmp.children, roles)</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤路由并添加到vuex中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GenerateRoutes(&#123; commit &#125;, data) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; roles &#125; = data</span><br><span class="line">        <span class="keyword">let</span> accessedRouters</span><br><span class="line">        <span class="keyword">if</span> (roles.includes(<span class="string">'admin'</span>)) &#123;</span><br><span class="line">          accessedRouters = asyncRouterMap</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          accessedRouters = filterAsyncRouter(asyncRouterMap, roles)</span><br><span class="line">        &#125;</span><br><span class="line">        commit(<span class="string">'SET_ROUTERS'</span>, accessedRouters)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果是通过接口获取的路由信息则可以直接拼接静态路由和动态路由信息，当然获取路由信息需要在登录之后或者刷新页面的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  routes: constantRouterMap</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">  ...RouterDefault,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/404'</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h4><p>按钮权限可以根据角色在前端判断是否展示；也可以在数据库中存储按钮信息，在按钮上绑定的接口权限，通过接口返回按钮信息，前端判断是否展示。</p><p>可以自定义定义指令实现按钮展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否包含按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permissionCheck</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> permissionList = store.getters.permissions</span><br><span class="line">  <span class="keyword">const</span> stringCode = code.split(<span class="string">'||'</span>)</span><br><span class="line">  <span class="keyword">const</span> menuCode = stringCode[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> buttonCode = stringCode[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> checkFlag = <span class="literal">false</span></span><br><span class="line">  permissionList.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.menuCode == menuCode) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!!item.permitAll) &#123;</span><br><span class="line">        checkFlag = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        item.roleButtons.some(<span class="function">(<span class="params">itemBtn, indexBtn</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (itemBtn.buttonCode == buttonCode) &#123;</span><br><span class="line">            checkFlag = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> checkFlag</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @export 自定义指令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">directive</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Vue.directive(<span class="string">'permit'</span>, &#123;</span><br><span class="line">    bind(el, binding) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!permissionCheck(binding.value)) &#123;</span><br><span class="line">        el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue代码中可以使用<code>v-permit</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button class=&quot;filter-item&quot;</span><br><span class="line">    v-permit=&quot;&apos;ROLE-SETTING||role_create&apos;&quot;</span><br><span class="line">    @click=&quot;handleCreate&quot;</span><br><span class="line">    size=&quot;small&quot;</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    icon=&quot;el-icon-edit&quot;&gt;</span><br><span class="line">    添加</span><br><span class="line">&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>vue缓存页面使用</p><p>在路由文件中添加<code>meta</code> </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'newslist'</span>,</span><br><span class="line">    name: <span class="string">'NewsList'</span>,</span><br><span class="line">    meta: &#123;<span class="attr">keepAlive</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/NewsList'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在router-view处添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p> 这样页面就只会加载一次然后缓存起来，再次访问不回刷新数据。</p><p> 如果需要在另一个页面跳转过来刷新数据时，则需要使用<code>beforeRouteLeave</code> 关键是设置keepAlive</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 设置下一个路由meta</span></span><br><span class="line">    to.meta.keepAlive = <span class="literal">false</span>; <span class="comment">// 让页面不缓存，重新请求数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(to);</span><br><span class="line">    next(); <span class="comment">// 跳转页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>页面刷新vuex被清空</p><p> 同一页面，刷新后vuex被清空</p><ul><li><p>试用localstorage存储</p></li><li><p>重新获取数据</p><p>需要某些数据之前先判断一下数据是否存在，如果不存在重新获取。</p></li></ul></li></ol><ol start="3"><li><p>nextTick适当使用</p><blockquote><p>延迟到下次dom更新循环之后执行延迟回调，在修改数据之后立即执行这个方法，获取最新的DOM。获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM或出问题，所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码.</p></blockquote><ul><li><p>你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。</p><p>原因：在执行created时并没有dom渲染，此时进行dom操作无效，将执行dom操作的js代码放入nextTick回调函数中，与其相对应的是mounted钩子函数。</p></li><li><p>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。</p><p>原因：vue是异步执行dom更新，一旦观察到数据变化，vue会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。</p><p>简而言之，等待DOM更新之后再进行操作。</p></li></ul></li></ol><ol start="4"><li><p>组件之间的调用方式</p><p> 父子组件</p><ul><li><p>prop向下传递，事件向上传递</p></li><li><p>子组件添加ref属性，父组件可以获取到子组件的实例，不推荐使用</p></li><li><p>插槽slot 作用域插槽</p><p>非父子组件</p></li><li><p>使用状态管理</p></li><li><p>实例化一个公共vue实例</p><p>必须要有公共的实例（可以是空的），才能使用 <code>$emit</code> 获取 <code>$on</code> 的数据参数，实现组件通信 </p></li></ul></li></ol><ol start="5"><li><p>计算属性设置值</p><blockquote><p>计算属性是基于它们的依赖进行缓存的，一旦依赖发生变化，计算属性会重新计算</p></blockquote><p> 通过set方法触发它所依赖的变量，单纯的赋值，在取值的时候不会被改变</p></li></ol><ol start="6"><li><p>vue文件中内联样式中有无scoped属性的差别</p><ul><li>有scoped只在当前vue文件中可以使用这个样式</li><li>无scoped，会影响其他文件</li></ul></li></ol><ol start="7"><li><p>v-for v-key</p><p> 为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。</p></li></ol><ol start="8"><li><p>v-for v-if</p><p> 当它们处于同一节点，v-for的优先级比v-if更高。</p></li></ol><ol start="9"><li><p>组件、prop大小写不敏感，事件敏感</p><p> 不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p><p> 不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。</p></li></ol><ol start="10"><li><p>prop值的改变–不是立即</p><p>如果父组件中给子组件传递了一个prop的值，然后调用子组件的方法去获取该值，会发现值没有立即改变。</p><ul><li>可以监听值的改变去调用相应子组件的方法</li><li>将子组件相关方法的调用放在nextTick里面</li></ul></li></ol><ol start="11"><li><p>对象中某属性值的监听</p><p>普通的<code>watch</code>中只能监听到某对象的变化才会调用，当想监听对象以及对象中属性的变化都调用函数时，可以使用<code>deep:true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    bet: &#123;</span><br><span class="line">      pokerState: <span class="number">53</span>,</span><br><span class="line">      pokerHistory: <span class="string">'local'</span></span><br><span class="line">    &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  bet: &#123;</span><br><span class="line">    handler(newValue, oldValue) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(newValue)</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="12"><li><p>this.$forceUpdate</p><p>强制刷新页面，触发页面重新渲染</p></li></ol><ol start="13"><li><p>vue中的beforeRouteUpdate</p><p>在<code>xxx/detail/123</code>和<code>xxx/edit/123</code>都用了同一个组件，<code>beforeRouteUpdate</code>不生效，但是watch <code>$route</code>是生效的？</p><p>扩展： 可以考虑在路由定义处使用别名 alias</p><p>官方解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="简单部署"><a href="#简单部署" class="headerlink" title="简单部署"></a>简单部署</h3><ol><li><p>执行命令前端代码打包，生成dist打包后的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure></li><li><p>将打包后的文件放至指定目录</p></li><li><p>配置nginx文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>    /var/www/html;</span><br><span class="line">        <span class="attribute">index</span>   index.html index.htm;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /v2 &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host rap2api.taobao.org;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://rap2api.taobao.org;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx</p></li></ol><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h3><h4 id="项目打包部署步骤"><a href="#项目打包部署步骤" class="headerlink" title="项目打包部署步骤"></a>项目打包部署步骤</h4><ol><li><p>编写Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> docker-registry.xxx/docker/nginx:<span class="number">1.13</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /var/www/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx/conf.d/ </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>,<span class="string">"-g"</span>,<span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>打包镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名 .</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name 容器名 -p 80:80 镜像||id</span><br></pre></td></tr></table></figure></li></ol><h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum -y install docker-ce</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --since=“2017-05-31” --tail=10 容器</span><br><span class="line">–since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</span><br><span class="line">-f : 查看实时日志</span><br><span class="line">-t : 查看日志产生的日期</span><br><span class="line">-tail=10 : 查看最后的10条日志。</span><br></pre></td></tr></table></figure><h4 id="几个命令"><a href="#几个命令" class="headerlink" title="几个命令"></a>几个命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker start/stop/restart 容器id <span class="comment">#启动暂停重启</span></span><br><span class="line">docker rm 容器id <span class="comment">#删除</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id <span class="comment">#杀掉一个运行中的容器。</span></span><br><span class="line">docker pause/unpause 容器id <span class="comment">#暂停/取消暂停</span></span><br><span class="line">docker create 镜像 // 创建容器但是不运行</span><br><span class="line">docker <span class="built_in">exec</span> -i -t 容器 /bin/bash <span class="comment">#开启一个交互模式的终端</span></span><br><span class="line">docker rmi &lt;image id&gt; <span class="comment"># 移除镜像</span></span><br><span class="line">docker rmi $(docker images | grep <span class="string">"none"</span> | awk <span class="string">'&#123;print $3&#125;'</span>) <span class="comment">#移除为none的镜像</span></span><br><span class="line">docker rm $(docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>) <span class="comment">#移除为exited的容器</span></span><br><span class="line">docker images -a 查看镜像</span><br><span class="line">docker ps -a 查看容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建VUE项目&quot;&gt;&lt;a href=&quot;#搭建VUE项目&quot; class=&quot;headerlink&quot; title=&quot;搭建VUE项目&quot;&gt;&lt;/a&gt;搭建VUE项目&lt;/h1&gt;&lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://qspinach.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/总结/</id>
    <published>2020-08-23T15:45:11.821Z</published>
    <updated>2020-08-23T15:45:11.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿里respository"><a href="#阿里respository" class="headerlink" title="阿里respository"></a>阿里respository</h3><p><a href="https://maven.aliyun.com/repository/spring" target="_blank" rel="noopener">https://maven.aliyun.com/repository/spring</a></p><h3 id="jar包安装到本地仓库"><a href="#jar包安装到本地仓库" class="headerlink" title="jar包安装到本地仓库"></a>jar包安装到本地仓库</h3><p>mvn install:install-file -Dfile=D:\commons-logging-1.2.jar -DgroupId=org.apache.commons -DartifactId=commons-logging -Dversion=1.2 -Dpackaging=jar </p><h3 id="resetful"><a href="#resetful" class="headerlink" title="resetful"></a>resetful</h3><p>（1）每一个URI代表一种资源；<br>（2）客户端和服务器之间，传递这种资源的某种表现层；<br>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><h3 id="Axure注册"><a href="#Axure注册" class="headerlink" title="Axure注册"></a>Axure注册</h3><p>License：zdfans.com<br>Key：gP5uuK2gH+iIVO3YFZwoKyxAdHpXRGNnZWN8Obntqv7++FF3pAz7dTu8B61ySxli</p><h3 id="webstorm-激活"><a href="#webstorm-激活" class="headerlink" title="webstorm 激活"></a>webstorm 激活</h3><p><a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a></p><h3 id="idea激活"><a href="#idea激活" class="headerlink" title="idea激活"></a>idea激活</h3><p><a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a><br><a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a><br><a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a></p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>./nginx  #打开 nginx<br>nginx -s reload|reopen|stop|quit  #重新加载配置|重启|停止|退出 nginx<br>nginx -t   #测试配置是否有语法错误</p><h3 id="启动Android模拟器"><a href="#启动Android模拟器" class="headerlink" title="启动Android模拟器"></a>启动Android模拟器</h3><p>cd c:&#39;Program Files’\android\tools<br>emulator.exe -netdelay none -netspeed full -avd Pixel_API_25</p><h3 id="win10-电脑-Ubuntu路径"><a href="#win10-电脑-Ubuntu路径" class="headerlink" title="win10 电脑 Ubuntu路径"></a>win10 电脑 Ubuntu路径</h3><p>C:\Users\syq\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs</p><h3 id="查看文件夹被哪个应用使用-任务管理器-》-性能-》资源监视器-》CPU-》关联的句柄-》结束进程"><a href="#查看文件夹被哪个应用使用-任务管理器-》-性能-》资源监视器-》CPU-》关联的句柄-》结束进程" class="headerlink" title="查看文件夹被哪个应用使用 任务管理器 》 性能 》资源监视器 》CPU 》关联的句柄 》结束进程"></a>查看文件夹被哪个应用使用 任务管理器 》 性能 》资源监视器 》CPU 》关联的句柄 》结束进程</h3><h3 id="网页中的视频播放"><a href="#网页中的视频播放" class="headerlink" title="网页中的视频播放"></a>网页中的视频播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed id=&quot;movie_player&quot; name=&quot;movie_player&quot; width=&quot;300&quot; height=&quot;180&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; flashvars=&quot;VideoIDS=XNDA5NTEwMTA0&amp;isAutoPlay=true&amp;isShowRelatedVideo=false&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; bgcolor=&quot;#FFFFFF&quot; src=&quot;http://static.youku.com/v1.0.0098/v/swf/qplayer.swf&quot; type=&quot;application/x-shockwave-flash&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="在网页中不能复制内容，在body标签中加"><a href="#在网页中不能复制内容，在body标签中加" class="headerlink" title="在网页中不能复制内容，在body标签中加"></a>在网页中不能复制内容，在body标签中加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onmousemove=&quot;HideMenu()&quot; oncontextmenu=&quot;return false&quot; ondragstart=&quot;return false&quot; onselectstart =&quot;return false&quot; onselect=&quot;document.selection.empty()&quot; oncopy=&quot;document.selection.empty()&quot; onbeforecopy=&quot;return false&quot; onmouseup=&quot;document.selection.empty()</span><br></pre></td></tr></table></figure><h3 id="自定义右键菜单"><a href="#自定义右键菜单" class="headerlink" title="自定义右键菜单"></a>自定义右键菜单</h3><p>HKEY_CLASSES_ROOT\Directory\background\shell</p><h3 id="windows-电脑查询端口"><a href="#windows-电脑查询端口" class="headerlink" title="windows 电脑查询端口"></a>windows 电脑查询端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><hr><p>react-router目前用的是3.X版本，4.X版本不适用3.X</p><hr><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>启动：<br>mongod –dbpath D:\nodejs\mongodb<br>使用：<br>1、mongo<br>2、show dbs<br>3、use 名字<br>4、查询 db.users.find();</p><hr><h3 id="npm-更新package-json"><a href="#npm-更新package-json" class="headerlink" title="npm 更新package.json"></a>npm 更新package.json</h3><p>1、npm install -g npm-check-updates <strong><strong><strong>***</strong></strong></strong><br>   npm-check-updates<br>   ncu -a<br>2、npm install -g npm-check<br>   npm-check -u</p><hr><h3 id="mysql更改root密码"><a href="#mysql更改root密码" class="headerlink" title="mysql更改root密码"></a>mysql更改root密码</h3><ol><li><p>停止mysql数据库<br>/etc/init.d/mysqld stop</p></li><li><p>执行如下命令<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;</p></li><li><p>使用root登录mysql数据库<br>mysql -u root mysql</p></li><li><p>更新root密码<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’) where USER=’root’;</p></li></ol><p>最新版MySQL请采用如下SQL：<br>mysql&gt; UPDATE user SET authentication_string=PASSWORD(‘newpassword’) where USER=’root’;</p><ol start="5"><li><p>刷新权限<br>mysql&gt; FLUSH PRIVILEGES;</p></li><li><p>退出mysql<br>mysql&gt; quit</p></li><li><p>重启mysql<br>/etc/init.d/mysqld restart</p></li><li><p>使用root用户重新登录mysql<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p></li></ol><hr><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><p>插件——-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Beautify</span><br><span class="line">ESLint</span><br><span class="line">GitLens-Git supercharged</span><br><span class="line">Live Server</span><br><span class="line">Power Mode</span><br><span class="line">Vetur</span><br><span class="line">vscode-icons</span><br><span class="line">Vue 2 Snippets</span><br></pre></td></tr></table></figure><p>配置——-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;javascript.implicitProjectConfig.experimentalDecorators&quot;: true,</span><br><span class="line">    &quot;liveServer.settings.donotShowInfoMsg&quot;: true,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;,</span><br><span class="line">    &quot;powermode.enabled&quot;: true,</span><br><span class="line">    // &quot;powermode.presets&quot;: &quot;fireworks&quot;,</span><br><span class="line">    &quot;powermode.presets&quot;: &quot;flames&quot;,</span><br><span class="line">    &quot;powermode.enableShake&quot;: false,</span><br><span class="line">    &quot;workbench.colorCustomizations&quot;: &#123;</span><br><span class="line">        &quot;editorWhitespace.foreground&quot;: &quot;#FFFFFF00&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;window.zoomLevel&quot;: 0,</span><br><span class="line">    &quot;extensions.ignoreRecommendations&quot;: true,</span><br><span class="line">    &quot;emmet.syntaxProfiles&quot;: &#123;</span><br><span class="line">        &quot;vue-html&quot;: &quot;html&quot;,</span><br><span class="line">        &quot;vue&quot;: &quot;html&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;vetur.validation.template&quot;: false,</span><br><span class="line">    &quot;eslint.options&quot;: &#123;</span><br><span class="line">        &quot;plugins&quot;: [&quot;html&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;eslint.validate&quot;: [</span><br><span class="line">        &quot;javascript&quot;,</span><br><span class="line">        &quot;javascriptreact&quot;,</span><br><span class="line">        &quot;html&quot;,</span><br><span class="line">        &quot;vue&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatterOptions&quot;: &#123;</span><br><span class="line">        &quot;wrap_attributes&quot;: &quot;force-aligned&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>=============================================================<br>微信签名<br>微信开发者<br>wx1338c897ca2c4cd5<br>9ce8ae04c9c392eb3a8bf601d1faf30d<br>获取token<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx1338c897ca2c4cd5&amp;secret=9ce8ae04c9c392eb3a8bf601d1faf30d" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx1338c897ca2c4cd5&amp;secret=9ce8ae04c9c392eb3a8bf601d1faf30d</a><br>获取ticket<br><a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a><br>获取签名<br>随机数：88646b78-e92f-4ef0-bb8f-22c6f0662488<br>时间戳：1542767511<br>地址：<a href="http://wx.guanxiaohe.cn/index.html" target="_blank" rel="noopener">http://wx.guanxiaohe.cn/index.html</a><br>获取签名地址：<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;阿里respository&quot;&gt;&lt;a href=&quot;#阿里respository&quot; class=&quot;headerlink&quot; title=&quot;阿里respository&quot;&gt;&lt;/a&gt;阿里respository&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://maven.ali
      
    
    </summary>
    
    
    
      <category term="other" scheme="https://qspinach.github.io/blog/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>函数总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/函数总结/</id>
    <published>2020-08-23T15:45:11.820Z</published>
    <updated>2020-08-23T15:45:11.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="秒杀倒计时"><a href="#秒杀倒计时" class="headerlink" title="/秒杀倒计时/"></a>/<em>秒杀倒计时</em>/</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var secondKill = function()&#123;</span><br><span class="line">    /*复盒子*/</span><br><span class="line">    var parentTime = document.getElementsByClassName(&apos;sk_time&apos;)[0];</span><br><span class="line">    /*span时间*/</span><br><span class="line">    var timeList = parentTime.getElementsByClassName(&apos;num&apos;);</span><br><span class="line"></span><br><span class="line">    console.log(timeList.length);</span><br><span class="line">    </span><br><span class="line">    var times = 7   * 60 * 60;</span><br><span class="line">    var timer;</span><br><span class="line">    timer = setInterval(function()&#123;</span><br><span class="line">        times  -- ;</span><br><span class="line">    </span><br><span class="line">        var h = Math.floor(times/(60*60));</span><br><span class="line">        var m = Math.floor(times/60%60);</span><br><span class="line">        var s = times%60;</span><br><span class="line">    </span><br><span class="line">        console.log(h+&apos;-&apos;+m+&quot;-&quot;+s);</span><br><span class="line">    </span><br><span class="line">        timeList[0].innerHTML = h&gt;10?Math.floor(h/10):0;</span><br><span class="line">        timeList[1].innerHTML = h%10;</span><br><span class="line">    </span><br><span class="line">        timeList[2].innerHTML = m&gt;10?Math.floor(m/10):0;</span><br><span class="line">        timeList[3].innerHTML = m%10;</span><br><span class="line">    </span><br><span class="line">        timeList[4].innerHTML = s&gt;10?Math.floor(s/10):0;</span><br><span class="line">        timeList[5].innerHTML = s%10;</span><br><span class="line">        if(times &lt;= 0)&#123;</span><br><span class="line">           clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,1000);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;秒杀倒计时&quot;&gt;&lt;a href=&quot;#秒杀倒计时&quot; class=&quot;headerlink&quot; title=&quot;/秒杀倒计时/&quot;&gt;&lt;/a&gt;/&lt;em&gt;秒杀倒计时&lt;/em&gt;/&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://qspinach.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>影视笔记</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/%E5%BD%B1%E8%A7%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/影视笔记/</id>
    <published>2020-08-23T15:45:11.820Z</published>
    <updated>2020-08-23T15:45:11.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图："><a href="#视图：" class="headerlink" title="视图："></a>视图：</h1><pre><code>alt + 左键  旋转alt + 右键  缩放alt + 中间  移动</code></pre><h1 id="空格键-四视图"><a href="#空格键-四视图" class="headerlink" title="空格键         四视图"></a>空格键         四视图</h1><pre><code>  顶视|透视————————————  前视|侧视</code></pre><h1 id="空格-鼠标左键"><a href="#空格-鼠标左键" class="headerlink" title="空格+鼠标左键"></a>空格+鼠标左键</h1><pre><code>top view            顶视front view         前视rigth view          侧视perspective view 透视</code></pre><h1 id="左边菜单-快捷键"><a href="#左边菜单-快捷键" class="headerlink" title="左边菜单  快捷键"></a>左边菜单  快捷键</h1><pre><code>W移动E旋转R缩放G重复上一步T显示弯曲控制器</code></pre><h1 id="变形规则："><a href="#变形规则：" class="headerlink" title="变形规则："></a>变形规则：</h1><h2 id="点-线-面选择"><a href="#点-线-面选择" class="headerlink" title="点 线 面选择"></a>点 线 面选择</h2><pre><code>点中物体鼠标右键Vertex 点，Face 面，Edge 边，Object Mode 退出点和面</code></pre><h2 id="挤压"><a href="#挤压" class="headerlink" title="挤压"></a>挤压</h2><pre><code>选中物体面 shift+鼠标右键向下划 Extrude Face</code></pre><h2 id="岛角-岛边"><a href="#岛角-岛边" class="headerlink" title="岛角 岛边"></a>岛角 岛边</h2><pre><code>shift+鼠标右键 Bevel EdgepolyBevel1    offset 0.5 偏移值    segments 2 次数</code></pre><h1 id="弯曲变形"><a href="#弯曲变形" class="headerlink" title="弯曲变形"></a>弯曲变形</h1><pre><code>Deformation 横向段数变化数必须够</code></pre><h1 id="删除历史记录："><a href="#删除历史记录：" class="headerlink" title="删除历史记录："></a>删除历史记录：</h1><pre><code>快捷键是 alt+shift+D</code></pre><h1 id="显示所有界面"><a href="#显示所有界面" class="headerlink" title="显示所有界面"></a>显示所有界面</h1><pre><code>Display &gt;&gt; UI Elements &gt;&gt; Show All UI Elements</code></pre><h1 id="删线"><a href="#删线" class="headerlink" title="删线"></a>删线</h1><pre><code>shift+鼠标右键  Delete Edge</code></pre><h1 id="坐标轴居中"><a href="#坐标轴居中" class="headerlink" title="坐标轴居中"></a>坐标轴居中</h1><pre><code>Modify &gt;&gt; Center Pivot</code></pre><h1 id="零面的观察方法及解决方法"><a href="#零面的观察方法及解决方法" class="headerlink" title="零面的观察方法及解决方法"></a>零面的观察方法及解决方法</h1><pre><code>观察：右击物体  Vertex Face 点面模式 解决方法：选中零面所在的点 执行shift+鼠标右键向上划 Merge Vertices合并点 &gt;&gt; Merge Vertices </code></pre><h1 id="maya导入图片"><a href="#maya导入图片" class="headerlink" title="maya导入图片"></a>maya导入图片</h1><pre><code>菜单栏</code></pre><img src="drtp.png"><h1 id="快速创建物体"><a href="#快速创建物体" class="headerlink" title="快速创建物体"></a>快速创建物体</h1><pre><code>shift+鼠标右键创建多边形工具      |圆柱—————球体</code></pre><h1 id="分割多边形"><a href="#分割多边形" class="headerlink" title="分割多边形"></a>分割多边形</h1><pre><code>shift+鼠标右键  Split右击结束绘制W结束命令</code></pre><h1 id="操作-调整中心点"><a href="#操作-调整中心点" class="headerlink" title="操作 调整中心点"></a>操作 调整中心点</h1><pre><code>D键 + 鼠标左键 移动坐标轴V键 + 鼠标左键 吸附点同时按下D键和V键</code></pre><h1 id="镜像复制-关联复制"><a href="#镜像复制-关联复制" class="headerlink" title="镜像复制 关联复制"></a>镜像复制 关联复制</h1><pre><code>1、Edit &gt;&gt; Duplicate Special 口 [属性框] 2、Scale： X Y Z3、Apply</code></pre><h1 id="合并物体和分离物体"><a href="#合并物体和分离物体" class="headerlink" title="合并物体和分离物体"></a>合并物体和分离物体</h1><pre><code>shift+鼠标右键 向下  Combine合并  Separate分离</code></pre><p>为什么选这张素材？<br>设计制作的思路？<br>运用到哪些知识点？<br>制作过程中遇到哪些问题？<br>实训阶段感悟？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;视图：&quot;&gt;&lt;a href=&quot;#视图：&quot; class=&quot;headerlink&quot; title=&quot;视图：&quot;&gt;&lt;/a&gt;视图：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;alt + 左键  旋转
alt + 右键  缩放
alt + 中间  移动&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=
      
    
    </summary>
    
    
    
      <category term="影视笔记" scheme="https://qspinach.github.io/blog/tags/%E5%BD%B1%E8%A7%86%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/vue%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/vue总结/</id>
    <published>2020-08-23T15:45:11.820Z</published>
    <updated>2020-08-23T15:45:11.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1、vue缓存页面使用"><a href="#1、vue缓存页面使用" class="headerlink" title="1、vue缓存页面使用"></a>1、vue缓存页面使用</h4><p>在路由文件中添加<code>meta</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'newslist'</span>,</span><br><span class="line">    name: <span class="string">'NewsList'</span>,</span><br><span class="line">    meta: &#123;<span class="attr">keepAlive</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/NewsList'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在router-view处添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p>这样页面就只会加载一次然后缓存起来，再次访问不回刷新数据。</p><p>如果需要在另一个页面跳转过来刷新数据时，则需要使用<code>beforeRouteLeave</code> 关键是设置keepAlive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">    // 设置下一个路由meta</span><br><span class="line">    to.meta.keepAlive = false; // 让页面不缓存，重新请求数据</span><br><span class="line">    console.log(to);</span><br><span class="line">    next(); // 跳转页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、页面刷新vuex被清空"><a href="#2、页面刷新vuex被清空" class="headerlink" title="2、页面刷新vuex被清空"></a>2、页面刷新vuex被清空</h4><p>同一页面，刷新后vuex被清空</p><ul><li><p>试用localstorage存储</p></li><li><p>重新获取数据</p><p>需要某些数据之前先判断一下数据是否存在，如果不存在重新获取。</p></li></ul><h4 id="3、nextTick适当使用"><a href="#3、nextTick适当使用" class="headerlink" title="3、nextTick适当使用"></a>3、nextTick适当使用</h4><blockquote><p>延迟到下次dom更新循环之后执行延迟回调，在修改数据之后立即执行这个方法，获取最新的DOM。获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM或出问题，所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码.</p></blockquote><ul><li><p>你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。</p><p>原因：在执行created时并没有dom渲染，此时进行dom操作无效，将执行dom操作的js代码放入nextTick回调函数中，与其相对应的是mounted钩子函数。</p></li><li><p>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。</p><p>原因：vue是异步执行dom更新，一旦观察到数据变化，vue会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。</p></li></ul><p>简而言之，等待DOM更新之后再进行操作。</p><h4 id="4、组件之间的调用方式"><a href="#4、组件之间的调用方式" class="headerlink" title="4、组件之间的调用方式"></a>4、组件之间的调用方式</h4><p>父子组件</p><ul><li>prop向下传递，事件向上传递</li><li>子组件添加ref属性，父组件可以获取到子组件的实例，不推荐使用</li><li>插槽slot 作用域插槽</li></ul><p>非父子组件</p><ul><li><p>使用状态管理</p></li><li><p>实例化一个公共vue实例</p><p>必须要有公共的实例（可以是空的），才能使用 <code>$emit</code> 获取 <code>$on</code> 的数据参数，实现组件通信 </p></li></ul><h4 id="5、计算属性设置值"><a href="#5、计算属性设置值" class="headerlink" title="5、计算属性设置值"></a>5、计算属性设置值</h4><blockquote><p>计算属性是基于它们的依赖进行缓存的，一旦依赖发生变化，计算属性会重新计算</p></blockquote><p>通过set方法触发它所依赖的变量，单纯的赋值，在取值的时候不会被改变</p><h4 id="6、vue文件中内联样式中有无scoped属性的差别"><a href="#6、vue文件中内联样式中有无scoped属性的差别" class="headerlink" title="6、vue文件中内联样式中有无scoped属性的差别"></a>6、vue文件中内联样式中有无scoped属性的差别</h4><ul><li>有scoped只在当前vue文件中可以使用这个样式</li><li>无scoped，会影响其他文件</li></ul><h4 id="7、v-for-v-key"><a href="#7、v-for-v-key" class="headerlink" title="7、v-for v-key"></a>7、v-for v-key</h4><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。</p><h4 id="8、v-for-v-if"><a href="#8、v-for-v-if" class="headerlink" title="8、v-for v-if"></a>8、v-for v-if</h4><p>当它们处于同一节点，v-for的优先级比v-if更高。</p><h4 id="9、组件、prop大小写不敏感，事件敏感"><a href="#9、组件、prop大小写不敏感，事件敏感" class="headerlink" title="9、组件、prop大小写不敏感，事件敏感"></a>9、组件、prop大小写不敏感，事件敏感</h4><p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p><p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。</p><h4 id="10、prop值的改变–不是立即"><a href="#10、prop值的改变–不是立即" class="headerlink" title="10、prop值的改变–不是立即"></a>10、prop值的改变–不是立即</h4><p>如果父组件中给子组件传递了一个prop的值，然后调用子组件的方法去获取该值，会发现值没有立即改变。</p><ul><li>可以监听值的改变去调用相应子组件的方法</li><li>将子组件相关方法的调用放在nextTick里面</li></ul><h4 id="11、对象中某属性值的监听"><a href="#11、对象中某属性值的监听" class="headerlink" title="11、对象中某属性值的监听"></a>11、对象中某属性值的监听</h4><p>普通的<code>watch</code>中只能监听到某对象的变化才会调用，当想监听对象以及对象中属性的变化都调用函数时，可以使用<code>deep:true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　bet: &#123;</span><br><span class="line">　　　　　　pokerState: <span class="number">53</span>,</span><br><span class="line">　　　　　　pokerHistory: <span class="string">'local'</span></span><br><span class="line">　　　　&#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">　　bet: &#123;</span><br><span class="line">　　　　handler(newValue, oldValue) &#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(newValue)</span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　deep: <span class="literal">true</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12、this-forceUpdate"><a href="#12、this-forceUpdate" class="headerlink" title="12、this.$forceUpdate"></a>12、this.$forceUpdate</h4><p>强制刷新页面，触发页面重新渲染</p><h4 id="13、vue中的beforeRouteUpdate"><a href="#13、vue中的beforeRouteUpdate" class="headerlink" title="13、vue中的beforeRouteUpdate"></a>13、vue中的beforeRouteUpdate</h4><p>在<code>xxx/detail/123</code>和<code>xxx/edit/123</code>都用了同一个组件，<code>beforeRouteUpdate</code>不生效，但是watch <code>$route</code>是生效的？</p><p>扩展： 可以考虑在路由定义处使用别名 alias</p><p>官方解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;h4 id=&quot;1、vue缓存页面使用&quot;&gt;&lt;a href=&quot;#1、vue缓存页面使用&quot; class=&quot;headerlink&quot; title=&quot;1、v
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://qspinach.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/webpack/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/webpack/</id>
    <published>2020-08-23T15:45:11.820Z</published>
    <updated>2020-08-23T15:45:11.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>本地安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --gobal webpack</span><br></pre></td></tr></table></figure><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>资源管理</p><p>css加载，需安装css-loader和style-loader并在module配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123;</span><br><span class="line">         test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">         use: [</span><br><span class="line">           <span class="string">'style-loader'</span>,</span><br><span class="line">           <span class="string">'css-loader'</span></span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>less加载，需安装less-loader并在module配置,安装less-loader时需要安装less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123;</span><br><span class="line">         test: /\.less/,</span><br><span class="line">         use: [</span><br><span class="line">           'style-loader',</span><br><span class="line">           'css-loader',</span><br><span class="line">           'less-loader'</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>sass加载，需安装sass-loader并在module配置,安装sass-loader时需要安装node-sass</p><p>node-sass需要在淘宝镜像源下安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev sass-loader node-sass</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123;</span><br><span class="line">         test: /\.scss/,</span><br><span class="line">         use: [</span><br><span class="line">           'style-loader',</span><br><span class="line">           'css-loader',</span><br><span class="line">           'sass-loader'</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>图片路径，需安装配置url-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.(png|svg|jpg|gif)$/,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: 'url-loader',</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 2048,</span><br><span class="line">          name: '[hash:8]-[name].[ext]'</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片加载，需安装配置file-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'file-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字体加载同样需要安装配置file-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'file-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载数据,如 JSON 文件，CSV、TSV 和 XML。使用csv-loader和xml-loader安装配置即可处理CSV、TSV 和 XML类型的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev csv-loader xml-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'csv-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'xml-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlWebpackPlugin</code> 创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'./src/index.html'</span>),</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      title: <span class="string">'Output Management'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlWebpackPlugin</code> 在每次构建前清理 <code>/dist</code> 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Output Management'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更容易跟踪错误和警告JavaScript 提供了 <code>source map</code> 功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack-dev-server</code> 提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块热替换是webpack内置的功能，无需进行完全刷新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tree shaking移除 JavaScript 上下文中的未引用代码(dead-code)。从 webpack 4 开始，也可以通过 <code>&quot;mode&quot;</code> 配置选项轻松切换到压缩输出，只需设置为 <code>&quot;production&quot;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"production"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让代码支持es6及更高语法需要以下步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">1、安装第一套包 npm install babel-core babel-loader babel-plugin-transform-runtime --dev-save</span></span><br><span class="line"><span class="comment">2、安装第二套包 npm install babel-preset-env babel-preset-stage-0 --save-dev</span></span><br><span class="line"><span class="comment">3、webpack配置文件添加新的匹配规则 &#123;test: /\.js$/, use: 'babel-loader', exclude: /node_modules/&#125;</span></span><br><span class="line"><span class="comment">4、根目录下新建.babelrc的Babel配置文件 &#123;"presets": ["env", "stage-0"], "plugins": ["transform-runtime"]&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>修改包文件的入口和出口文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 自动补全的扩展名</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    <span class="comment">// 默认路径代理</span></span><br><span class="line">    <span class="comment">// 例如 import Vue from 'vue'，会自动到 'vue/dist/vue.common.js'中寻找</span></span><br><span class="line">    alias: &#123; <span class="comment">// 别名</span></span><br><span class="line">        <span class="string">'@'</span>: path.resolve(<span class="string">'src'</span>),</span><br><span class="line">        <span class="string">'@config'</span>: path.resolve(<span class="string">'config'</span>),</span><br><span class="line">        <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.common.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).解决</p><p>在webpack中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">hints:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack中如何使用vue</p><ol><li>安装vue包</li><li>安装解析vue文件的vue-loader vue-template-complier</li><li>在入口文件main.js中导入vue模块</li><li>定义vue组件，组件组成部分template，script，style</li><li>导入定义好的组件</li><li>创建vue实例 new Vue({ el: ‘#app’, render: c =&gt; c(login) })</li><li>在页面中创建一个id为app的div元素，作为我们vue实例控制区域</li></ol><p>vue中引入mui.min.js报错，解决办法在.babel中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ignore"</span>:[  <span class="string">'./src/assets/js/mui.js'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安
      
    
    </summary>
    
    
    
      <category term="webpack" scheme="https://qspinach.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/nginx/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/nginx/</id>
    <published>2020-08-23T15:45:11.793Z</published>
    <updated>2021-03-15T09:15:56.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx配置前端打包后的代码———————————"><a href="#nginx配置前端打包后的代码———————————" class="headerlink" title="nginx配置前端打包后的代码———————————-"></a>nginx配置前端打包后的代码———————————-</h3><p>server {<br>    listen           8000;<br>    server_name      localhost;</p><pre><code>location / {    root    html/vue-anchor-admin;    index   index.html index.htm;}location /api {      proxy_set_header Host wx.guanxiaohe.cn;      proxy_pass http://wx.guanxiaohe.cn/ssm;}</code></pre><p>}</p><p>server {<br>    listen        8002;<br>    server_name   localhost;</p><pre><code>location / {    root    html/vue-anchor-admin-iview;    index   index.html index.htm;    try_files $uri $uri/ /index.html;}location /api {      proxy_set_header Host rap2api.taobao.org;      proxy_pass http://rap2api.taobao.org/app/mock/122795;}</code></pre><p>}</p><h3 id="nginx查看访问量最高的ip地址"><a href="#nginx查看访问量最高的ip地址" class="headerlink" title="nginx查看访问量最高的ip地址"></a>nginx查看访问量最高的ip地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> /var/<span class="built_in">log</span>/nginx/access.log | sort | uniq -c | sort -nr -k1 | head -n 10</span><br></pre></td></tr></table></figure><h3 id="nginx-配置多个文件"><a href="#nginx-配置多个文件" class="headerlink" title="nginx 配置多个文件"></a>nginx 配置多个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx配置前端打包后的代码———————————&quot;&gt;&lt;a href=&quot;#nginx配置前端打包后的代码———————————&quot; class=&quot;headerlink&quot; title=&quot;nginx配置前端打包后的代码———————————-&quot;&gt;&lt;/a&gt;nginx配置
      
    
    </summary>
    
    
    
      <category term="Nginx" scheme="https://qspinach.github.io/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>npm or yarn</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/npm%20or%20yarn/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/npm or yarn/</id>
    <published>2020-08-23T15:45:11.793Z</published>
    <updated>2021-09-11T17:15:16.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos7-下安装nodejs"><a href="#centos7-下安装nodejs" class="headerlink" title="centos7 下安装nodejs"></a>centos7 下安装nodejs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash</span><br><span class="line">$ curl --silent --location https://deb.nodesource.com/setup_8.x | sudo bash</span><br><span class="line">$ curl --silent --location https://deb.nodesource.com/setup_10.x | sudo bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ yum install -y nodejs</span><br></pre></td></tr></table></figure><h3 id="nvm-安装node"><a href="#nvm-安装node" class="headerlink" title="nvm 安装node"></a>nvm 安装node</h3><p>根据提示设置nvm路径和nodejs路径<br>node下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure><p>npm下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm npm_mirror  https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h3 id="使用nvm下载node"><a href="#使用nvm下载node" class="headerlink" title="使用nvm下载node"></a>使用nvm下载node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.0.0 64-bit</span><br><span class="line">nvm use 8.0.0</span><br><span class="line">nvm list //查看以己经安装的</span><br><span class="line"></span><br><span class="line">windows下的nvm命令</span><br><span class="line">nvm arch                         查看当前系统的位数和当前nodejs的位数</span><br><span class="line">nvm install &lt;version&gt; [arch]     安装制定版本的node 并且可以指定平台 version 版本号  arch 平台</span><br><span class="line">nvm list [available]         </span><br><span class="line">  - nvm list   查看已经安装的版本</span><br><span class="line">  - nvm list installed 查看已经安装的版本</span><br><span class="line">  - nvm list available 查看网络可以安装的版本</span><br><span class="line">nvm on                           打开nodejs版本控制</span><br><span class="line">nvm off                          关闭nodejs版本控制</span><br><span class="line">nvm proxy [url]                  查看和设置代理</span><br><span class="line">nvm node_mirror [url]            设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">nvm npm_mirror [url]             设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是：https://github.com/npm/npm/archive/.</span><br><span class="line">nvm uninstall &lt;version&gt;          卸载制定的版本</span><br><span class="line">nvm use [version] [arch]         切换制定的node版本和位数</span><br><span class="line">nvm root [path]                  设置和查看root路径</span><br><span class="line">nvm version                      查看当前的版本</span><br></pre></td></tr></table></figure><h3 id="NPM设置淘宝镜像"><a href="#NPM设置淘宝镜像" class="headerlink" title="NPM设置淘宝镜像"></a>NPM设置淘宝镜像</h3><ol><li><p>查询当前配置的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://registry.npmjs.org/" target="_blank" rel="noopener">https://registry.npmjs.org/</a></p></blockquote></li><li><p>设置成淘宝镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li><li><p>换成原来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></li></ol><h3 id="Yarn-设置淘宝镜像"><a href="#Yarn-设置淘宝镜像" class="headerlink" title="Yarn 设置淘宝镜像"></a>Yarn 设置淘宝镜像</h3><ol><li><p>查询当前配置的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config get registry</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://registry.yarnpkg.com" target="_blank" rel="noopener">https://registry.yarnpkg.com</a></p></blockquote></li><li><p>设置成淘宝镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></li></ol><h3 id="发布自己的包"><a href="#发布自己的包" class="headerlink" title="发布自己的包"></a>发布自己的包</h3><ol><li>注册npm账号</li><li>登录npm账号<br><code>npm login</code> 找到需要发布的包根目录下</li><li>发布包<br><code>npm publish</code> 直接发布</li><li>删除已发布的包<br><code>npm unpublish 包名 --force</code><br>只能删除72小时内发布的包。删除的包，在24小时内不允许重复发布。发布包需谨慎，不要发布无意义的包。</li></ol><h3 id="解决的一些问题"><a href="#解决的一些问题" class="headerlink" title="解决的一些问题"></a>解决的一些问题</h3><ol><li>@vue/cli 创建项目是安装chromedriver时失败的问题<br>此方法是单独安装chromdriver<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure>所以可以在给npm和yarn设置chromedriver源<br>设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure>设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set &quot;chromedriver_cdnurl&quot; &quot;https://npm.taobao.org/mirrors/chromedriver&quot;</span><br></pre></td></tr></table></figure></li><li>The engine “node” is incompatible with this module. Expected version “=&gt; ^4.0.0”.<br>error Found incompatible module<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn help | grep -- --ignore</span><br><span class="line">    --ignore-scripts                  don&apos;t run lifecycle scripts</span><br><span class="line">    --ignore-platform                 ignore platform checks</span><br><span class="line">    --ignore-engines                  ignore engines check</span><br><span class="line">    --ignore-optional                 ignore optional dependencies</span><br></pre></td></tr></table></figure></li><li>关于node-sass不能安装问题<br>设置npm or yarn淘宝镜像源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set sass-binary-site http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure>指定node-sass下载源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set sass-binary-site http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure></li></ol><p>管理员身份运行cmd 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -global -production windows-build-tools</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;centos7-下安装nodejs&quot;&gt;&lt;a href=&quot;#centos7-下安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;centos7 下安装nodejs&quot;&gt;&lt;/a&gt;centos7 下安装nodejs&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="npm" scheme="https://qspinach.github.io/blog/tags/npm/"/>
    
      <category term="yarn" scheme="https://qspinach.github.io/blog/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/mysql/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/mysql/</id>
    <published>2020-08-23T15:45:11.793Z</published>
    <updated>2020-08-23T15:45:11.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="—–设置默认值"><a href="#—–设置默认值" class="headerlink" title="—–设置默认值"></a>—–设置默认值</h3><p>若本身存在默认值，则先删除<br>alter table表名alter column字段名drop default;<br>然后设置默认值（若本身不存在则可以直接设定）<br>alter table表名 alter column字段名 set default默认值;</p><h3 id="——设置数据库导入文件最大容量"><a href="#——设置数据库导入文件最大容量" class="headerlink" title="——设置数据库导入文件最大容量"></a>——设置数据库导入文件最大容量</h3><p>set global max_allowed_packet = 2<em>1024</em>1024*10;<br>show VARIABLES like ‘%max_allowed_packet%’;</p><h3 id="——查看编码-修改编码"><a href="#——查看编码-修改编码" class="headerlink" title="——查看编码 修改编码"></a>——查看编码 修改编码</h3><p>show VARIABLES like ‘%char%’</p><p>[mysqld]<br>character_set_server=utf8</p><h3 id="——MySql-“Row-size-too-large-gt-8126-”解决办法在my-ini中加入"><a href="#——MySql-“Row-size-too-large-gt-8126-”解决办法在my-ini中加入" class="headerlink" title="——MySql “Row size too large (&gt; 8126)”解决办法在my.ini中加入"></a>——MySql “Row size too large (&gt; 8126)”解决办法在my.ini中加入</h3><p>[mysqld]<br>innodb_log_file_size = 512M<br>innodb_strict_mode = 0</p><h3 id="———————Redis"><a href="#———————Redis" class="headerlink" title="———————Redis"></a>———————Redis</h3><p>redis-cli.exe<br>127.0.0.1:6379&gt;shutdown<br>not connected&gt;exit</p><p>启动命令<br>redis-server redis.windows.conf<br>设置服务命令<br>redis-server –service-install redis.windows-service.conf –loglevel verbose</p><p>卸载服务：<br>redis-server –service-uninstall<br>启动服务<br>redis-server –service-start<br>停止服务<br>redis-server –service-stop</p><hr><h3 id="mysql更改root密码"><a href="#mysql更改root密码" class="headerlink" title="mysql更改root密码"></a>mysql更改root密码</h3><p>#1.停止mysql数据库<br>/etc/init.d/mysqld stop</p><p>#2.执行如下命令<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;</p><p>#3.使用root登录mysql数据库<br>mysql -u root mysql</p><p>#4.更新root密码<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘xxx123’) where USER=’root’;<br>#最新版MySQL请采用如下SQL：<br>mysql&gt; UPDATE user SET authentication_string=PASSWORD(‘xxx123’) where USER=’root’;</p><p>#5.刷新权限<br>mysql&gt; FLUSH PRIVILEGES;</p><p>#6.退出mysql<br>mysql&gt; quit</p><p>#7.重启mysql<br>/etc/init.d/mysqld restart</p><p>#8.使用root用户重新登录mysql<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;—–设置默认值&quot;&gt;&lt;a href=&quot;#—–设置默认值&quot; class=&quot;headerlink&quot; title=&quot;—–设置默认值&quot;&gt;&lt;/a&gt;—–设置默认值&lt;/h3&gt;&lt;p&gt;若本身存在默认值，则先删除&lt;br&gt;alter table表名alter column字段名drop 
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://qspinach.github.io/blog/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>js总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/js%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/js总结/</id>
    <published>2020-08-23T15:45:11.793Z</published>
    <updated>2020-08-23T15:45:11.793Z</updated>
    
    <content type="html"><![CDATA[<h4 id="reduce-问题"><a href="#reduce-问题" class="headerlink" title="reduce 问题"></a>reduce 问题</h4><p>在ie下会出现Uint8Array 无法使用reduce方法，原因ie下Uint8Array不是一个数组集合而是一个对象集合<br>解决方法：使用lodash中的reduce，即可兼容Array|Object</p><p>==============================================================</p><h4 id="获取json对象的键和值"><a href="#获取json对象的键和值" class="headerlink" title="获取json对象的键和值"></a>获取json对象的键和值</h4><p>var data = {a: 1, b: 2, c: 3, d: 4}<br>Object.keys(data);  // [“a”, “b”, “c”, “d”]<br>Object.values(data);    // [1, 2, 3, 4]</p><p>==============================================================</p><h4 id="vscode-修饰报错-修改setting"><a href="#vscode-修饰报错-修改setting" class="headerlink" title="vscode 修饰报错 修改setting"></a>vscode 修饰报错 修改setting</h4><p>“javascript.implicitProjectConfig.experimentalDecorators”: true</p><p>==============================================================</p><h4 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h4><p>window对象的defaultStatus<br>状态栏显示时间<br>d = new Date();<br>time = d.getHours();<br>window.status = time;</p><h4 id="盗链问题"><a href="#盗链问题" class="headerlink" title="盗链问题"></a>盗链问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var frontURL = document.referrer;</span><br><span class="line">var host = location.hostname;</span><br><span class="line">if(frontURL != &quot;&quot;)&#123;</span><br><span class="line">var frontHost = frontURL.substring(7.host.length + 7)</span><br><span class="line">if(host == frontHost)&#123;</span><br><span class="line">alert(&quot;没有盗链&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">alert(&quot;非法盗链&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">alert(&quot;你是直接打开文档的&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锚对象"><a href="#锚对象" class="headerlink" title="锚对象"></a>锚对象</h4><p>window.document.anchors</p><h4 id="历史对象"><a href="#历史对象" class="headerlink" title="历史对象"></a>历史对象</h4><p>history.go(n)<br>n=0表示载入当前页面，n&gt;0表示载入历史列表中往前数第n个页面,n&lt;0表示载入历史列表中的往后数第n个页面</p><h4 id="华氏温度和摄氏温度"><a href="#华氏温度和摄氏温度" class="headerlink" title="华氏温度和摄氏温度"></a>华氏温度和摄氏温度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var degFahren = prompt(&quot;Enter the degrees in Fahrenheit&quot;,50);</span><br><span class="line">var degCent;</span><br><span class="line">degCent = 5/9*(degFahren-32);</span><br><span class="line">alert(degCent);</span><br></pre></td></tr></table></figure><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parseInt();</span><br><span class="line">parseFloat();</span><br><span class="line">for...in循环,无需知道数组的元素的个数</span><br><span class="line">var elementIndex;</span><br><span class="line">for(elementIndex in myArray)&#123;</span><br><span class="line">document.write(myArray[elementIndex]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calcFactorial(num);</span><br></pre></td></tr></table></figure><h4 id="在一个字符串中查找另一个字符串"><a href="#在一个字符串中查找另一个字符串" class="headerlink" title="在一个字符串中查找另一个字符串"></a>在一个字符串中查找另一个字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf();</span><br></pre></td></tr></table></figure><h4 id="复制字符串的一个子串"><a href="#复制字符串的一个子串" class="headerlink" title="复制字符串的一个子串"></a>复制字符串的一个子串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myString = &quot;JavaScript&quot;;</span><br><span class="line">var mySubString = myString.substring(0,4);</span><br></pre></td></tr></table></figure><h4 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toLowerCase()和toUpperCase()</span><br></pre></td></tr></table></figure><h4 id="将字符编码转换为字符串-fromCharCode-方法"><a href="#将字符编码转换为字符串-fromCharCode-方法" class="headerlink" title="将字符编码转换为字符串 fromCharCode()方法"></a>将字符编码转换为字符串 fromCharCode()方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myString = String.fromCharCode(65,66,67);</span><br></pre></td></tr></table></figure><h4 id="slice-方法，复制数组的部分"><a href="#slice-方法，复制数组的部分" class="headerlink" title="slice()方法，复制数组的部分"></a>slice()方法，复制数组的部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var names = new Array(&quot;Eggs&quot;,&quot;Milks&quot;,&quot;Potatoes&quot;);</span><br><span class="line">var slicedArray = names.slice(1,3);</span><br></pre></td></tr></table></figure><h4 id="join-将数组转换为字符串"><a href="#join-将数组转换为字符串" class="headerlink" title="join()将数组转换为字符串"></a>join()将数组转换为字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myShopping = new Array(&quot;Eggs&quot;,&quot;Milks&quot;,&quot;Potatoes&quot;);</span><br><span class="line">var myShooingList = myShopping.join(&quot;&lt;br/&gt;&quot;);</span><br></pre></td></tr></table></figure><h4 id="按字母排序"><a href="#按字母排序" class="headerlink" title="按字母排序"></a>按字母排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var names = new Array(&quot;Eggs&quot;,&quot;Milks&quot;,&quot;Potatoes&quot;);</span><br><span class="line">names.sort();</span><br></pre></td></tr></table></figure><h4 id="reverse-方法，反转数组元素的顺序"><a href="#reverse-方法，反转数组元素的顺序" class="headerlink" title="reverse()方法，反转数组元素的顺序"></a>reverse()方法，反转数组元素的顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myShopping = new Array(&quot;Eggs&quot;,&quot;Milks&quot;,&quot;Potatoes&quot;);</span><br><span class="line">myShopping.reverse();</span><br></pre></td></tr></table></figure><h4 id="测试元素"><a href="#测试元素" class="headerlink" title="测试元素"></a>测试元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">every();some();filter();</span><br><span class="line">var num = new Array(1,2,3);</span><br><span class="line">function Test()&#123;&#125;</span><br><span class="line">every(Test);</span><br></pre></td></tr></table></figure><h4 id="abs-返回所传入的绝对值"><a href="#abs-返回所传入的绝对值" class="headerlink" title="abs();返回所传入的绝对值"></a>abs();返回所传入的绝对值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myNumber = -101;</span><br><span class="line">document.write(Math.abs(myNumber));</span><br></pre></td></tr></table></figure><p>ceil();修整到最接近的最小整数，即向上修整<br>floor();舍去小数部分<br>round();大于等于0.5向上修整，小于等于0.5向下修整</p><p>正则表达式<br>“g”表示全局标志</p><hr><p>***select改变值事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.onchange = function()&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>*添加删除数组<br>    push()后面推进去<br>       向数组的末尾添加一个或多个元素，并返回新的长度。<br>    unshift()从数组的前面放入<br>       向数组的开头添加一个或更多元素，并返回新的长度<br>    pop() 删除最后一个数组元素<br>    shift()删除第一个数组元素<br>*</strong>数组和字符串转换<br>    join()将数组转换为字符串<br>    split()将字符串转换为数组<br><strong>*插入子节点<br>    1. appendChild();    添加孩子     append 添加的意思<br>        意思：  添加孩子   放到盒子的 最后面。<br>    2. insertBefore(插入的节点，参照节点)   子节点  添加孩子<br>*</strong>克隆节点<br>    cloneNode();<br>    括号里面可以跟参数  ， 如果 里面是 true  深层复制， 除了复制本盒子，还复制子节点<br>    如果为 false  浅层复制   只复制   本节点  不复制 子节点。</p><p><strong>**</strong>url编码和解码<br>    encodeURIComponent()函数可把字符串作为URI组件进行编码<br>    decodeURIComponent()函数可把字符串作为URI组件进行解码<br><strong>**</strong>substr()<br>    substr(起始位置,[取的个数])<br>    同上。<br>  不写取的个数， 默认从起始位置一直取到最后 。<br>  取的个数：    是指从起始位置开始，往后面数几个。</p><p><strong>***</strong>offset家族<br>    offsetWidth  offsetHeight<br>    得到对象的宽度和高度(自己的，与他人无关) offsetWidth =  width  + border  +  padding<br>    offsetLeft   offsetTop<br>    返回距离上级盒子（最近的带有定位）左边的位置</p><p><strong>**</strong>offsetTop<br>    var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;<br><strong>**</strong>client<br>    clientX          clientWidth   可视区域的宽度<br>    clientWidth     width  +  padding<br>    offsetWidth     width + padding + border<br>    scrollWidth     width + padding      超过  内容的宽度<br><strong>**</strong>Math<br>    Math.ceil(); 向上取整<br>    Math.floor();向下取整<br>    Math.round();四舍五入<br><strong>**</strong>获取css样式<br>     1.   obj.currentStyle   ie  opera  常用<br>        外部（使用<link>）和内嵌（使用<style>）样式表中的样式（ie和opera）<br>     2 .window.getComputedStyle(“元素”, “伪类”)     w3c 两个选项是必须的， 没有伪类 用 null 替代<br>     3.兼容<br>     function getStyle(obj,attr) {<br>        if (obj.currentStyle) {<br>            return obj.currentStyle[attr];<br>        } else {<br>            return window.getComputedStyle(obj,null)[attr];<br>        }<br>      }<br><strong>***</strong>in运算符<br>    in运算符也是一个二元运算符，但是对运算符左右两个操作数的要求比较严格。<br>    in运算符要求第1个（左边的）操作数必须是字符串类型或可以转换为字符串类型的其他类型，<br>    而第2个（右边的）操作数必须是数组或对象。只有第1个操作数的值是第2个操作数的属性名，<br>    才会返回true，否则返回false</p><hr><h4 id="js-内置对象："><a href="#js-内置对象：" class="headerlink" title="js 内置对象："></a>js 内置对象：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String </span><br><span class="line">Date</span><br><span class="line">Math</span><br><span class="line">Array</span><br><span class="line">RegExp</span><br><span class="line">Number</span><br><span class="line">Object</span><br><span class="line">Function</span><br><span class="line">Null</span><br><span class="line">Boolean</span><br><span class="line">Error</span><br><span class="line">Cookie</span><br><span class="line">Session</span><br></pre></td></tr></table></figure><h4 id="Js-Bom对象"><a href="#Js-Bom对象" class="headerlink" title="Js Bom对象"></a>Js Bom对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Window</span><br><span class="line">Document</span><br><span class="line">History</span><br><span class="line">Location</span><br><span class="line">Screen</span><br><span class="line">Navigator</span><br></pre></td></tr></table></figure><h4 id="将伪数组转化为数组"><a href="#将伪数组转化为数组" class="headerlink" title="将伪数组转化为数组"></a>将伪数组转化为数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var json = &#123;0:&apos;first&apos;,1:&apos;second&apos;,length:2&#125;;</span><br><span class="line">Array.prototype.slice.call(json);</span><br></pre></td></tr></table></figure><h4 id="写一个通用的事件侦听器函数"><a href="#写一个通用的事件侦听器函数" class="headerlink" title="写一个通用的事件侦听器函数"></a>写一个通用的事件侦听器函数</h4><p>// event(事件)工具集，来源：github.com/markyun</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">markyun.Event = &#123;</span><br><span class="line">    // 页面加载完成后</span><br><span class="line">    readyEvent : function(fn) &#123;</span><br><span class="line">        if (fn==null) &#123;</span><br><span class="line">            fn=document;</span><br><span class="line">        &#125;</span><br><span class="line">        var oldonload = window.onload;</span><br><span class="line">        if (typeof window.onload != &apos;function&apos;) &#123;</span><br><span class="line">            window.onload = fn;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            window.onload = function() &#123;</span><br><span class="line">                oldonload();</span><br><span class="line">                fn();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 视能力分别使用dom0||dom2||IE方式 来绑定事件</span><br><span class="line">    // 参数： 操作的元素,事件名称 ,事件处理程序</span><br><span class="line">    addEvent : function(element, type, handler) &#123;</span><br><span class="line">        if (element.addEventListener) &#123;</span><br><span class="line">            //事件类型、需要执行的函数、是否捕捉</span><br><span class="line">            element.addEventListener(type, handler, false);</span><br><span class="line">        &#125; else if (element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(&apos;on&apos; + type, function() &#123;</span><br><span class="line">                handler.call(element);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            element[&apos;on&apos; + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 移除事件</span><br><span class="line">    removeEvent : function(element, type, handler) &#123;</span><br><span class="line">        if (element.removeEnentListener) &#123;</span><br><span class="line">            element.removeEnentListener(type, handler, false);</span><br><span class="line">        &#125; else if (element.detachEvent) &#123;</span><br><span class="line">            element.detachEvent(&apos;on&apos; + type, handler);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            element[&apos;on&apos; + type] = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span><br><span class="line">    stopPropagation : function(ev) &#123;</span><br><span class="line">        if (ev.stopPropagation) &#123;</span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ev.cancelBubble = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 取消事件的默认行为</span><br><span class="line">    preventDefault : function(event) &#123;</span><br><span class="line">        if (event.preventDefault) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            event.returnValue = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 获取事件目标</span><br><span class="line">    getTarget : function(event) &#123;</span><br><span class="line">        return event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span><br><span class="line">    getEvent : function(e) &#123;</span><br><span class="line">        var ev = e || window.event;</span><br><span class="line">        if (!ev) &#123;</span><br><span class="line">            var c = this.getEvent.caller;</span><br><span class="line">            while (c) &#123;</span><br><span class="line">                ev = c.arguments[0];</span><br><span class="line">                if (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                c = c.caller;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>Ajax 是什么？Ajax 的交互模型？同步和异步的区别？如何解决跨域问题？<br>Ajax 是什么：</p><ol><li>通过异步模式，提升了用户体验</li><li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</li><li>Ajax 在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li></ol><p>Ajax 的最大的特点：</p><ol><li>Ajax可以实现动态不刷新（局部刷新）</li><li>readyState 属性 状态 有5个可取值： 0 = 未初始化，1 = 启动， 2 = 发送，3 = 接收，4 = 完成</li></ol><p>Ajax 同步和异步的区别:</p><ol><li>同步：提交请求 -&gt; 等待服务器处理 -&gt; 处理完毕返回，这个期间客户端浏览器不能干任何事</li><li>异步：请求通过事件触发 -&gt; 服务器处理（这是浏览器仍然可以作其他事情）-&gt; 处理完毕<br>ajax.open方法中，第3个参数是设同步或者异步。</li></ol><p>Ajax 的缺点：</p><ol><li>Ajax 不支持浏览器 back 按钮</li><li>安全问题 Ajax 暴露了与服务器交互的细节</li><li>对搜索引擎的支持比较弱</li><li>破坏了程序的异常机制</li><li>不容易调试</li></ol><p>解决跨域问题：</p><ol><li>jsonp</li><li>iframe</li><li>window.name、window.postMessage</li><li>服务器上设置代理页面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">*************************************</span><br><span class="line"></span><br><span class="line">function whatBrowser() &#123;  </span><br><span class="line">    document.Browser.Name.value=navigator.appName;  </span><br><span class="line">    document.Browser.Version.value=navigator.appVersion;  </span><br><span class="line">    document.Browser.Code.value=navigator.appCodeName;  </span><br><span class="line">    document.Browser.Agent.value=navigator.userAgent;  </span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">* 智能获取浏览器版本信息</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">var browser=&#123;</span><br><span class="line">    versions:function()&#123;</span><br><span class="line">    var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">    return &#123;//移动终端浏览器版本信息</span><br><span class="line">      trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</span><br><span class="line">      presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</span><br><span class="line">      webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</span><br><span class="line">      gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</span><br><span class="line">      mobile: !!u.match(/AppleWebKit.*Mobile.*/)||!!u.match(/AppleWebKit/), //是否为移动终端</span><br><span class="line">      ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class="line">      android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器</span><br><span class="line">      iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class="line">      iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</span><br><span class="line">      webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</span><br><span class="line">    &#125;;</span><br><span class="line">   &#125;(),</span><br><span class="line">   language:(navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><strong><strong>****</strong></strong></strong>状态码<br>100 Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200 OK   正常返回信息<br>201 Created  请求成功并且服务器创建了新的资源<br>202 Accepted  服务器已接受请求，但尚未处理<br>301 Moved Permanently  请求的网页已永久移动到新位置<br>302 Found  临时性重定向<br>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI<br>304 Not Modified  自从上次请求后，请求的网页未修改过<br>400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求<br>401 Unauthorized  请求未授权<br>403 Forbidden  禁止访问<br>404 Not Found  找不到如何与 URI 相匹配的资源<br>500 Internal Server Error  最常见的服务器端错误<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</p><p><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong>js 操作获取和设置 cookie<br>// 创建cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function setCookie(name, value, expires, path, domain, secure) &#123;</span><br><span class="line">    var cookieText = encodeURIComponent(name) + &apos;=&apos; + encodeURIComponent(value);</span><br><span class="line">    if (expires instanceof Date) &#123;</span><br><span class="line">        cookieText += &apos;; expires=&apos; + expires;</span><br><span class="line">    &#125;</span><br><span class="line">    if (path) &#123;</span><br><span class="line">        cookieText += &quot;; path=&quot; + path     &#125;</span><br><span class="line">    if (domain) &#123;</span><br><span class="line">        cookieText += &apos;; domain=&apos; + domain;</span><br><span class="line">    &#125;</span><br><span class="line">    if (secure) &#123;</span><br><span class="line">        cookieText += &apos;; secure&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.cookie = cookieText;</span><br><span class="line">&#125;</span><br><span class="line">// 获取cookie</span><br><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var cookieName = encodeURIComponent(name) + &apos;=&apos;;</span><br><span class="line">    var cookieStart = document.cookie.indexOf(cookieName);</span><br><span class="line">    var cookieValue = null;</span><br><span class="line">    if (cookieStart &gt; -1) &#123;</span><br><span class="line">        var cookieEnd = document.cookie.indexOf(&apos;;&apos;, cookieStart);</span><br><span class="line">        if (cookieEnd == -1) &#123;</span><br><span class="line">            cookieEnd = document.cookie.length;</span><br><span class="line">        &#125;</span><br><span class="line">        cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line">    return cookieValue;</span><br><span class="line">&#125;</span><br><span class="line">// 删除cookie</span><br><span class="line">function unsetCookie(name) &#123;</span><br><span class="line">    document.cookie = name + &quot;= ; expires=&quot; + new Date(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><pre><code>ES6</code></pre><hr><p>—-模板字符串：<br>    let apple = “苹果”;<br>    let coffee = “咖啡”;<br>    let = kitChen<code>今天的早餐是${apple} 与 ${coffee} !</code>;<br>    function kitChen(strings, …values) {<br>    console.log(strings); // [“今天的早餐是”, “与”, “!”, raw: Array[3]]<br>    consloe.log(values);  // [“苹果”, “咖啡”]<br>    }</p><p>—-新字符串方法<br>    let breakfast = “今天早餐是什么？”;<br>    console.log(breakfast.startsWith(“今天”)); // true 判断以什么开头<br>    console.log(breakfast.endsWith(“!”)); // false 判断以什么结尾<br>    console.log(breakfast.includes(“?”)); // true 判断是否包含</p><p>—-设置函数默认参数<br>    function breakfast(coke = “蛋糕”, drink = “果汁”) {<br>    return <code>${coke} , ${drink}</code>;<br>    }<br>    console.log(breakfast());</p><p>—-展开操作符<br>    let fruits = [“苹果”, “香蕉”],<br>    foods = [“橘子”, …fruits];<br>    console.log(foods); // [“橘子”, “苹果”, “香蕉”]</p><p>—-函数name<br>    let breakfast = function(){}<br>    console.log(breakfast.name); // breakfast<br>    let breakfast = function superBreakfast(){}<br>    console.log(breakfast.name); // superBreakfast</p><p>—-判断两个值是否相等<br>    Object.is(NaN, NaN); // true<br>    Object.is(+0, -0); // false</p><p>—-把一个对象值复制到另一个对象<br>    let breakfast = {};<br>    breakfast.assgin(breakfast, {drink: “啤酒”})</p><p>—-设置对象的prototype<br>    let breakfast = { getDrink(){ return “果汁”; }};<br>    let dinner = { getDrink(){ return “啤酒”;}};<br>    let sunday = Object.create(breakfast); // 基于breakfast创建的对象<br>    console.log(Object.getPrototypeOf(sunday) === breakfast); // true<br>    Object.setProtytypeOf(sunday, dinner); ****<br>    console.log(Object.getPrototypeOf(sunday) === dinner); // true</p><p>—- <strong>proto</strong><br>    let breakfast = { getDrink(){ return “果汁”; }};<br>    let dinner = { getDrink(){ return “啤酒”;}};<br>    let sunday = { <strong>proto</strong>: breakfast };<br>    console.log(Object.getPrototypeOf(sunday) === breakfast); // true<br>    sunday.<strong>proto</strong> = dinner;<br>    console.log(Object.getPrototypeOf(sunday) === dinner); // true</p><p>—-super<br>    let breakfast = { getDrink(){ return “果汁”; }};<br>    let dinner = { getDrink(){ return “啤酒”;}};<br>    let sunday = { <strong>proto</strong>: breakfast, getDrink(){ return super.getDrink() + “牛奶”; } };<br>    console.log(sunday.getDrink()); // “果汁牛奶”</p><hr><p>问题：判断select选择情况</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#demo&quot;).change(function () &#123;</span><br><span class="line">    var val = $(this).val();</span><br><span class="line">    var res = confirm(&quot;您确认修改为&quot;+val+&quot;么？&quot;);</span><br><span class="line">    if(res == true)&#123;</span><br><span class="line">        //确认</span><br><span class="line">        $(this).attr(&quot;hook&quot;,val);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //取消</span><br><span class="line">        if(typeof $(this).attr(&quot;hook&quot;) == &quot;undefined&quot;)&#123;</span><br><span class="line">            //尚未做过选择，重置为默认选择</span><br><span class="line">            $(this).val($(this).children(&quot;option:first-child&quot;).val());</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //重置为修改之前的选择</span><br><span class="line">            $(this).val($(this).attr(&quot;hook&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>时间format</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//格式化CST日期的字串</span><br><span class="line">function formatCSTDate(strDate, format) &#123;</span><br><span class="line">    return formatDate(new Date(strDate), format);</span><br><span class="line">&#125;</span><br><span class="line">//格式化日期</span><br><span class="line">function formatDate(date, format) &#123;</span><br><span class="line">    var paddNum = function (num) &#123;</span><br><span class="line">        num += &quot;&quot;;</span><br><span class="line">        return num.replace(/^(\d)$/, &quot;0$1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //指定格式字符</span><br><span class="line">    var cfg = &#123;</span><br><span class="line">        yyyy: date.getFullYear() //年 : 4位</span><br><span class="line">        , yy: date.getFullYear().toString().substring(2)//年 : 2位</span><br><span class="line">        , M: date.getMonth() + 1  //月 : 如果1位的时候不补0</span><br><span class="line">        , MM: paddNum(date.getMonth() + 1) //月 : 如果1位的时候补0</span><br><span class="line">        , d: date.getDate()   //日 : 如果1位的时候不补0</span><br><span class="line">        , dd: paddNum(date.getDate())//日 : 如果1位的时候补0</span><br><span class="line">        , hh: date.getHours()  //时</span><br><span class="line">        , mm: date.getMinutes() //分</span><br><span class="line">        , ss: date.getSeconds() //秒</span><br><span class="line">    &#125;</span><br><span class="line">    format || (format = &quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">    return format.replace(/([a-z])(\1)*/ig, function (m) &#123;</span><br><span class="line">        return cfg[m];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;reduce-问题&quot;&gt;&lt;a href=&quot;#reduce-问题&quot; class=&quot;headerlink&quot; title=&quot;reduce 问题&quot;&gt;&lt;/a&gt;reduce 问题&lt;/h4&gt;&lt;p&gt;在ie下会出现Uint8Array 无法使用reduce方法，原因ie下Uint8A
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://qspinach.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/hexo/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/hexo/</id>
    <published>2020-08-23T15:45:11.793Z</published>
    <updated>2020-08-23T15:45:11.793Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://qspinach.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/docker/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/docker/</id>
    <published>2020-08-23T15:45:11.790Z</published>
    <updated>2020-08-23T15:45:11.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \docker-client \ </span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum -y install docker-ce</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> docker-registry.xxx/docker/nginx:<span class="number">1.13</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /var/www/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./custom.conf /etc/nginx/conf.d/ </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>,<span class="string">"-g"</span>,<span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="build镜像"><a href="#build镜像" class="headerlink" title="build镜像"></a>build镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名 .</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>将容器中的8000端口映射到服务器80端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name 容器名 -p 8000:80 镜像id</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --since=“2017-05-31” --tail=10 容器</span><br><span class="line">–since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</span><br><span class="line">-f : 查看实时日志</span><br><span class="line">-t : 查看日志产生的日期</span><br><span class="line">-tail=10 : 查看最后的10条日志。</span><br></pre></td></tr></table></figure><h3 id="几个命令"><a href="#几个命令" class="headerlink" title="几个命令"></a>几个命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker start/stop/restart 容器id <span class="comment">#启动暂停重启</span></span><br><span class="line">docker rm 容器id <span class="comment">#删除</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id <span class="comment">#杀掉一个运行中的容器。</span></span><br><span class="line">docker pause/unpause 容器id <span class="comment">#暂停/取消暂停</span></span><br><span class="line">docker create 镜像 // 创建容器但是不运行</span><br><span class="line">docker <span class="built_in">exec</span> -i -t 容器 /bin/bash <span class="comment">#开启一个交互模式的终端</span></span><br><span class="line">docker rmi &lt;image id&gt; <span class="comment"># 移除镜像</span></span><br><span class="line">docker rmi $(docker images | grep <span class="string">"none"</span> | awk <span class="string">'&#123;print $3&#125;'</span>) <span class="comment">#移除为none的镜像</span></span><br><span class="line">docker rm $(docker ps -a | grep <span class="string">"Exited"</span> | awk <span class="string">'&#123;print $1 &#125;'</span>) <span class="comment">#移除为exited的容器</span></span><br><span class="line">docker images -a 查看镜像</span><br><span class="line">docker ps -a 查看容器</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; title=&quot;docker安装&quot;&gt;&lt;/a&gt;docker安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://qspinach.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/git/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/git/</id>
    <published>2020-08-23T15:45:11.790Z</published>
    <updated>2021-03-15T09:15:12.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><p>git init 初始化<br>git status 状况<br>git add .添加<br>git rm -r –cached 要忽略的文件<br>git commit 将本地的变化提交到本地仓库文件夹 归档<br>git commit –amend -m [message]使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>git diff 可以用于对比当前状态和版本库中状态的变化<br>git log 可以查看提交日志<br>git reset –hard 版本  回归到指定版本<br>git push origin HEAD –force  执行完回滚版本后，在执行这个可以删除回滚版本之后的commit<br>git clone + git地址</p><p>git checkout -b dev origin/dev</p><hr><p>git stash // 保存当前工作进度，会把暂存区和工作区的改动保存起来<br>git stash save ‘message…’ // 可以添加一些注释<br>git stash list // 显示保存进度的列表。<br>git stash drop [stash_id] // 删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。<br>git stash clear // 删除所有存储的进度。</p><hr><h3 id="git提交顺序"><a href="#git提交顺序" class="headerlink" title="git提交顺序"></a>git提交顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git init 初始化</span><br><span class="line">git status 状况</span><br><span class="line">git add .添加</span><br><span class="line">git commit -m &apos;名称&apos;将本地的变化提交到本地仓库文件夹 归档</span><br><span class="line">git remote rm origin // 删除远程仓库地址</span><br><span class="line">git remote add origin https://github.com/QSpinach/git-demo.git // 添加远程仓库地址</span><br><span class="line">git remote set-url origin https://github.com/QSpinach/git-demo.git // 更改远程仓库地址</span><br><span class="line">git push -u origin master // 强制push</span><br><span class="line">git pull origin master 把GitHub上的项目取下来</span><br></pre></td></tr></table></figure><h3 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h3><pre><code>1、git branch gh-pages2、git checkout gh-pages  选择分支3、git push -u origin gh-pages</code></pre><p>访问网址：qspinach.github.io/ + 项目名</p><h3 id="合并项目：git-merge-syq-dev"><a href="#合并项目：git-merge-syq-dev" class="headerlink" title="合并项目：git merge syq-dev"></a>合并项目：git merge syq-dev</h3><p>一、<br>    1、从另一个版本中取回 git pull + 路径 （master）<br>二、<br>    1、分享版本库 git clone –bare<br>    ** git push –set-upstream origin syq-dev 本地新建的syq-dev分支，提交需要与远程分支关联<br>    2、push到bare版本库中 git push + 版本库路径 master<br>    3、pull取回 git pull + 版本库路径 master</p><p>git clone -b 克隆指定分支</p><hr><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><p>git config –global user.name “xxxx”   设置用户名</p><p>git config –global user.email “xxxx”    设置邮箱</p><p>git config user.name     查看用户名</p><p>git config user.email    查看邮箱</p><p>git config –global user.name “xxxx” 修改用户名</p><p>git config –global user.email “<a href="mailto:xxxx@xxx.com" target="_blank" rel="noopener">xxxx@xxx.com</a>“ 修改邮箱</p><hr><h3 id="git一些问题"><a href="#git一些问题" class="headerlink" title="git一些问题"></a>git一些问题</h3><p>git push 报错<br>error: src refspec master does not match any.<br>原因是本地仓库为空<br>解决办法是本地commit以下再提交</p><hr><p>git 这个分支bug没改完切换到其他分支改bug，再切会来继续改bug</p><p>1、执行 $ git stash 命令，将当前分支修改的内容 stash 起来<br>2、执行 $ git stash list 命令，查看 stash 列表，会看到已经刚才的修改已存储<br>3、执行 $ git status 命令，显示没有东西需要提交，这个时候你就可以切换到其他分支了<br>4、执行 $ git branch | $ git checkout 切换分支<br>5、修复完紧急的 Bug 后，就可以切回之前的分支，进行未完成的内容<br>6、执行 $ git stash list 命令，查看 stash 列表<br>7、执行 $ git stash apply stash@{0} 命令，恢复 id 为 4240c0c 的 stash 的内容<br>8、执行 $ git stash drop stash@{0} 命令，删除 stash 列表中已经恢复的 id 为 4240c0c 的 stash 记录</p><p>正常clone方式<br>git clone &lt;远程仓库地址&gt;</p><p>默认clone的是远程仓库的master分支</p><p>clone指定分支<br>git clone -b &lt;分支名&gt; &lt;远程仓库名&gt; </p><p>在本地创建该分支的文件夹，且只包含该远程仓库的该分支下所有文件，其他分支文件不会包含</p><p>拉代码之前先输入这个命令<br>git config –global credential.helper store</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;git命令&quot;&gt;&lt;a href=&quot;#git命令&quot; class=&quot;headerlink&quot; title=&quot;git命令&quot;&gt;&lt;/a&gt;git命令&lt;/h3&gt;&lt;p&gt;git init 初始化&lt;br&gt;git status 状况&lt;br&gt;git add .添加&lt;br&gt;git rm -r 
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://qspinach.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>css总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/css%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/css总结/</id>
    <published>2020-08-23T15:45:11.789Z</published>
    <updated>2020-08-23T15:45:11.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>牛客：<br>(1)、父级div定义 height<br>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。<br>优点：简单、代码少、容易掌握<br>缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题<br>建议：不推荐使用，只建议高度固定的布局时使用<br>(2)、结尾处加空div标签 clear:both<br>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度<br>优点：简单、代码少、浏览器支持好、不容易出现怪问题<br>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不好<br>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法<br>(3)、父级div定义 伪类:after 和 zoom<br>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题<br>优点：浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）<br>缺点：代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持。<br>建议：推荐使用，建议定义公共类，以减少CSS代码。<br>(4)、父级div定义 overflow:hidden<br>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度<br>优点：简单、代码少、浏览器支持好<br>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。<br>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。<br>(5)、父级div定义 overflow:auto<br>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度<br>优点：简单、代码少、浏览器支持好<br>缺点：内部宽高超过父级div时，会出现滚动条。<br>建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</p><p>传智：<br>1） 加高法<br>2)  clear:both;<br>3)  隔墙法</p><pre><code>&lt;div&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;cl h10&quot;&gt;&lt;/div&gt;&lt;div&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code></pre><p>4） 内墙法</p><pre><code>&lt;div&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;div class=&quot;cl h10&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code></pre><p>5） overflow:hidden;</p><h3 id="IE6兼容浮动"><a href="#IE6兼容浮动" class="headerlink" title="IE6兼容浮动"></a>IE6兼容浮动</h3><p>IE6留了一个后门，就是只要给css属性之前，加上下划线，这个属性就是IE6认识的专有属性。<br>    _background-color: green;<br>第二，IE6不支持用overflow:hidden;来清除浮动的<br>解决办法，以毒攻毒。追加一条<br>    _zoom:1;</p><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>1、塌陷问题<br>2、对其方式<br>必须有width 才能使用margin：0 auto;<br>3、善于使用父亲的padding，而不是儿子的margin<br>4、关于margin的IE6兼容问题<br>    当出现连续浮动的元素，携带和浮动方向相同的margin时，队首的元素，会双倍marign。<br>    解决方案：1、设置与浮动相反的margin<br>          2、给首元素加：_margin-left</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>1、记住，这四种状态，在css中，必须按照固定的顺序写：<br>a:link 、a:visited 、a:hover 、a:active<br>2、所有的a不继承text、font这些东西。因为a自己有一个伪类的权重。</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>1、背景是否固定。background-attachment:fixed;</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>1、绝对定位的儿子，无视参考的那个盒子的padding。<br>2、不一定是相对定位，任何定位，都可以作为参考点<br>3、绝对定位的盒子居中<br>    margin:0 auto;失效。<br>    left:50%; margin-left:负的宽度的一半。<br>4、固定定位<br>    IE6不兼容。</p><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>1、只有定位了的元素，才能有z-index值。也就是说，不管相对定位、绝对定位、固定定位，都可以使用z-index值。<br>   而浮动的东西不能用。<br>2、从父现象：父亲怂了，儿子再牛逼也没用。</p><hr><h3 id="常见的浏览器兼容性解决方案"><a href="#常见的浏览器兼容性解决方案" class="headerlink" title="常见的浏览器兼容性解决方案"></a>常见的浏览器兼容性解决方案</h3><p>(1)浏览器兼容问题一：不同浏览器的标签默认的外补丁和内补丁不同<br>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。<br>碰到频率:100%<br>解决方案：CSS里 <em>{margin:0;padding:0;}<br>备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的CSS文件开头都会用通配符</em>来设置各个标签的内外补丁是0。<br>(2)浏览器兼容问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大<br>问题症状:常见症状是IE6中后面的一块被顶到下一行<br>碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）<br>解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性<br>备注：我们最常用的就是div+CSS布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。<br>(3)浏览器兼容问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度<br>问题症状：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度<br>碰到频率：60%<br>解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。<br>备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。<br>(4)浏览器兼容问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug<br>问题症状：IE6里的间距比超过设置的间距<br>碰到几率：20%<br>解决方案 ： 在display:block;后面加入display:inline;display:table;<br>备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。<br>(5) 浏览器兼容问题五：图片默认有间距<br>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。<br>碰到几率：20%<br>解决方案：使用float属性为img布局<br>备注 ： 因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（我的一个学生使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以我禁止他们使用）<br>(6) 浏览器兼容问题六：标签最低高度设置min-height不兼容<br>问题症状：因为min-height本身就是一个不兼容的CSS属性，所以设置min-height时不能很好的被各个浏览器兼容<br>碰到几率：5%<br>解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}<br>备注：在B/S系统前端开时，有很多情况下我们又这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。<br>(7)浏览器兼容问题七：透明度的兼容CSS设置<br>一般在ie中用的是filter:alpha(opacity=0);这个属性来设置div或者是块级元素的透明度，而在firefox中，一般就是直接使用opacity:0,对于兼容的，一般的做法就是在书写css样式的将2个都写上就行，就能实现兼容</p><hr><h3 id="天猫-使用的css-reset重置浏览器默认样式："><a href="#天猫-使用的css-reset重置浏览器默认样式：" class="headerlink" title="天猫 使用的css reset重置浏览器默认样式："></a>天猫 使用的css reset重置浏览器默认样式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@charset &quot;gb2312&quot;;body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123;margin: 0;padding: 0&#125;body, button, input, select, textarea &#123;font: 12px &quot;microsoft yahei&quot;;line-height: 1.5;-ms-overflow-style: scrollbar&#125;h1, h2, h3, h4, h5, h6 &#123;font-size: 100%&#125;ul, ol &#123;list-style: none&#125;a &#123;text-decoration: none;cursor:pointer&#125;a:hover &#123;text-decoration: underline&#125;img &#123;border: 0&#125;button, input, select, textarea &#123;font-size: 100%&#125;table &#123;border-collapse: collapse;border-spacing: 0&#125;.clear &#123;clear:both&#125;.fr &#123;float:right&#125;.fl &#123;float:left&#125;.block &#123;display:block;text-indent:-999em&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h3><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变 UI 的情况下，对网站进行优化，在扩展的同时保持一致的 UI。</p><p>对于传统的网站来说重构通常是：</p><ol><li>表格(table)布局改为 DIV + CSS</li><li>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对 IE6 有效的)</li><li>对于移动平台的优化</li><li>针对于 SEO 进行优化</li><li>深层次的网站重构应该考虑的方面</li><li>减少代码间的耦合</li><li>让代码保持弹性</li><li>严格按规范编写代码</li><li>设计可扩展的API</li><li>代替旧有的框架、语言(如VB)</li><li>增强用户体验</li><li>通常来说对于速度的优化也包含在重构中</li><li>压缩JS、CSS、image等前端资源(通常是由服务器来解决)</li><li>程序的性能优化(如数据读写)</li><li>采用CDN来加速资源加载</li><li>对于JS DOM的优化</li><li>HTTP服务器的文件缓存</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h3&gt;&lt;p&gt;牛客：&lt;br&gt;(1)、父级div定义 height&lt;br&gt;原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://qspinach.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Linux总结</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/Linux%E6%80%BB%E7%BB%93/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/Linux总结/</id>
    <published>2020-08-23T15:45:11.788Z</published>
    <updated>2021-01-05T13:06:47.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update 更新软件源</span><br><span class="line">cd 进入某文件夹 cd - 快速回到上传路径</span><br><span class="line">ls 显示目录下所有文件</span><br><span class="line">mkdir 创建文件夹 mkdir a/b/c/d -p 创建文件夹</span><br><span class="line">touch 创建文件</span><br><span class="line">pwd 显示当前目录地址</span><br><span class="line">q 退出当前（man ls ）</span><br><span class="line">clear 清除终端显示信息</span><br><span class="line">tab键 自动补全文件名</span><br><span class="line">cat 查看文件内容 小文件适用</span><br><span class="line">history 显示历史命令</span><br><span class="line">! + 历史命令行号 执行对应命令</span><br><span class="line">rm 删除文件或文件夹 rm -r 递归地删除目录下的内容 删除文件夹</span><br><span class="line">rmdir 只能删非空文件夹</span><br><span class="line"></span><br><span class="line">* 是通配符（ls 2* 显示以2开头文件或目录)</span><br><span class="line">？是通配符（ls 2? 显示以2开头的两位名文件或目录）</span><br><span class="line">[] 通配符 （ls 1[1-5]3.txt 显示指定范围的文件和文件夹）</span><br><span class="line">&gt; 重定向 （ls &gt; xxx.txt 如果有xxx.txt文件，先删除xxx.txt内容删掉，再把显示在终端的信息放到文件里面。如果没有就直接生成文件再添加内容）</span><br><span class="line">&gt;&gt; 重定向追加 （ls &gt;&gt; xxx.txt 把内容放到文件里面的末尾）</span><br><span class="line">more 查看文件内容 （f往下翻， b往回撤 ） 大文件适用</span><br><span class="line">| 管道 （ls -alh /bin | more）将显示的内容分页显示 通过 | 进行分流</span><br><span class="line">ctrl + c 终止</span><br><span class="line">mv 源文件名 新文件名 (重命名文件或文件夹)</span><br><span class="line">mv 源文件 文件夹路径 剪切并粘贴到文件路径</span><br><span class="line">cp 文件 文件路径 复制粘贴， cp -r 复制粘贴文件夹</span><br><span class="line">ln -s 对谁创建快捷方式 创建后的文件名 （软链接）</span><br><span class="line">ln 对谁创建快捷方式 创建后的文件名 （硬链接） 删除原文件不影响创建后的文件</span><br><span class="line">ls -lh 查看文件的链接数</span><br><span class="line">grep -n &quot;ntfs&quot; xxx.txt 在xxx.txt文件中查找ntfs， -n是显示行号，-v 显示不包含ntfs的内容</span><br><span class="line"></span><br><span class="line">:wq 保存退出 :q! 不保存退出</span><br><span class="line"></span><br><span class="line">tar -cvf test.tar *py 打包所有py文件倒test.tar</span><br><span class="line">tar -xvf test.tar 解包</span><br><span class="line">tar -zcvf xxx.tar.gz *py 压缩 -C /dongge 指定路径</span><br><span class="line">tar -zxvf xxx.tar.gz 解压</span><br><span class="line">tar -jcvf yyy.tar.bz2 *py 压缩</span><br><span class="line">zip zzz.zip *py</span><br><span class="line">unzip zzz.zip, unzip -d /test4 zzz.zip 解压到指定路径</span><br><span class="line"></span><br><span class="line">wich ls 查看命令所在的文件路径</span><br><span class="line"></span><br><span class="line">cal 打印日历 -y 2018 打印2018年日历</span><br><span class="line">date &quot;+%Y-%m-%d&quot; 打印时间</span><br><span class="line"></span><br><span class="line">ps -aux 显示进程</span><br><span class="line">top 动态显示进程</span><br><span class="line">top 显示进程</span><br><span class="line">ps -ef|grep tomcat 查找相应进程</span><br><span class="line">kill -9 9909 杀死进程， -9 强制杀死进程</span><br><span class="line"></span><br><span class="line">reboot 重启</span><br><span class="line">shutdown -h （now或10或 20:20） 关机 指定时间</span><br><span class="line"></span><br><span class="line">df -h 查看硬盘使用情况</span><br><span class="line">du -h 显示当前路径使用情况</span><br><span class="line">ifconfig 显示网络信息</span><br><span class="line">ping 检查是否能网络连通</span><br><span class="line"></span><br><span class="line">sudo useradd shuaige -m 创建用户</span><br><span class="line">cat /etc/passwd 查看有多少账户</span><br><span class="line">su shuaige 切换shuaige用户</span><br><span class="line">sudo passwd shuaige 更新密码</span><br><span class="line">ssh python@172.16.7.139 远程登录电脑</span><br><span class="line">whoami 显示当前登录用户</span><br><span class="line">exit 退出当前用户</span><br><span class="line"></span><br><span class="line">文件权限</span><br><span class="line">rwx 可读 可写 可执行 </span><br><span class="line">r-- 只能读</span><br><span class="line">r-x 可读 可执行 但是不能写</span><br><span class="line"></span><br><span class="line">chmod u=rwx 2.py 修改权限 拥有者u</span><br><span class="line">chmod g=rwx 2.py 修改权限 同组者g</span><br><span class="line">chmod o=rwx 2.py 修改权限 其他o</span><br><span class="line">777</span><br></pre></td></tr></table></figure><hr><h3 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h3><p>————————vim————————————-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">i 光标前插入</span><br><span class="line">a 光标后插入</span><br><span class="line">esc 退出编辑模式</span><br><span class="line">:wq 保存并退出</span><br><span class="line">o 下一行插入</span><br><span class="line">I 行首</span><br><span class="line">A 行尾</span><br><span class="line">O 上一行插入</span><br><span class="line">yy 复制光标所在一行</span><br><span class="line">4yy 复制光标所在的行开始向下4行</span><br><span class="line">p 粘贴</span><br><span class="line">dd 剪切 删除光标所在的行</span><br><span class="line">2dd 剪切 删除光标所在的行往下2行</span><br><span class="line">D 剪切当前行光标后的所有内容</span><br><span class="line">d0 剪切当前行光标前的所有内容</span><br><span class="line">x 删除光标后的内容</span><br><span class="line">X 删除光标前的内容</span><br><span class="line">h 左 j下 k上 l右</span><br><span class="line">H 当前屏幕的上方</span><br><span class="line">M 当前屏幕中间</span><br><span class="line">L 当前屏幕的下方</span><br><span class="line"></span><br><span class="line">Ctrl + f 向下翻一页</span><br><span class="line">Ctrl + b 向上翻一页</span><br><span class="line">Ctrl + d 向下翻半屏</span><br><span class="line">Ctrl + u 向上翻半屏</span><br><span class="line"></span><br><span class="line">2G 快速定位到第二行</span><br><span class="line">G 快速调到整个代码的最后一行</span><br><span class="line">gg 快速回到整个代码的第一行</span><br><span class="line"></span><br><span class="line">w 向后跳一个单词的长度， 即跳到下一个单词的开始处</span><br><span class="line">b 向前跳一个单词的长度， 即跳到上一个单词的开始处</span><br><span class="line"></span><br><span class="line">u 撤销刚刚的操作</span><br><span class="line">Ctrl + r 反撤销</span><br><span class="line"></span><br><span class="line">v 选择</span><br><span class="line">V 选择光标经过的行</span><br><span class="line"></span><br><span class="line">&gt;&gt; 向右移动代码</span><br><span class="line">&lt;&lt; 向左移动代码</span><br><span class="line"></span><br><span class="line">. 重复执行上一次的命令</span><br><span class="line"></span><br><span class="line">/hello 查找hello</span><br><span class="line">n 下一个hello</span><br><span class="line">N 上一个hello</span><br><span class="line"></span><br><span class="line">r 替换一个字符</span><br><span class="line">R 替换光标以及后边的字符</span><br><span class="line">:%s/abc/123/g abc全部替换为123</span><br><span class="line">:1, 10s/abc/123/g 第一行到第10行的abc全部替换为123</span><br><span class="line"></span><br><span class="line">shift + zz 相当于wq</span><br><span class="line"></span><br><span class="line">末行模式</span><br><span class="line">w 保存</span><br><span class="line">q 退出</span><br><span class="line">wq 保存并退出</span><br></pre></td></tr></table></figure><hr><p>======================================================</p><h3 id="centos安装ss"><a href="#centos安装ss" class="headerlink" title="centos安装ss"></a>centos安装ss</h3><p>1、安装应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools</span><br><span class="line">easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>2、配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">vim /etc/shadowsocks/ss.json</span><br><span class="line">// 单用户</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:9000,           //服务端口</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;,          //服务密码</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,      //加密方式</span><br><span class="line">    &quot;fast_open&quot;:false,</span><br><span class="line">    &quot;workers&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">// 多用户一定要开启防火墙端口号</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:9000,           //服务端口</span><br><span class="line">    &quot;port_passowrd&quot;: &#123;</span><br><span class="line">    &quot;9000&quot;:&quot;123456&quot;,</span><br><span class="line">    &quot;9001&quot;:&quot;12345678&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,      //加密方式</span><br><span class="line">    &quot;fast_open&quot;:false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行<br>此方法可能无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/ss.json -d start </span><br><span class="line">ssserver -c /etc/shadowsocks/ss.json -d stop       //停止</span><br><span class="line">ssserver -c /etc/shadowsocks/ss.json -d restart    //重启</span><br></pre></td></tr></table></figure><p>推荐使用以下方式运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/ss.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStartPre=/bin/mkdir -p /run/shadowsocks</span><br><span class="line">ExecStartPre=/bin/chown nobody:nobody /run/shadowsocks</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks/ss.json #之前的配置地址</span><br><span class="line">Restart=on-abort</span><br><span class="line">User=nobody</span><br><span class="line">Group=nobody</span><br><span class="line">UMask=0027</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">运行服务并设置开机自启：</span><br><span class="line">systemctl start ss</span><br><span class="line">systemctl enable ss</span><br></pre></td></tr></table></figure><p>4、注意<br>防火墙需要开启端口号9000，修改过后重启防火墙才能生效<br>systemctl start firewalld.service（开启防火墙）<br>systemctl stop firewalld.service（停用防火墙）<br>service firewalld restart（重启防火墙）<br>firewall-cmd –zone=public –add-port=9000/udp –permanen(指定端口范围为9000通过防火墙)<br>firewall-cmd –zone=public –add-port=9000/tcp –permanen(指定端口范围为9000通过防火墙)<br>firewall-cmd –reload</p><p>window使用shadowsocks<br>1、安装shadowsocks，地址在github上搜sadowsocks-window<br>2、配置一下服务器地址，服务器端口，密码以及加密方式（与服务器对应）<br>3、启动系统代理，PAC模式和全局模式都可以，PAC模式一般是被代理被墙了的</p><p>// <a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocks" target="_blank" rel="noopener">https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocks</a></p><hr><p>======================================================</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>  安装<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt isntall mysql-client</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure><br>  启动service mysql start</p><p>  关闭service mysql stop</p><p>  重启service mysql restart</p><p>  mysql -uroot -p syqroot</p><p>  现在设置mysql允许远程访问，首先编辑文件/etc/mysql/mysql.conf.d/mysqld.cnf：<br>    sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf<br>    注释掉bind-address = 127.0.0.1：</p><hr><p>======================================================</p><h3 id="在-Ubuntu-系统安装-Redis-可以使用以下命令"><a href="#在-Ubuntu-系统安装-Redis-可以使用以下命令" class="headerlink" title="在 Ubuntu 系统安装 Redis 可以使用以下命令:"></a>在 Ubuntu 系统安装 Redis 可以使用以下命令:</h3><p>$sudo apt-get update<br>$sudo apt-get install redis-server<br>启动 Redis<br>$ redis-server<br>查看 redis 是否启动？<br>$ redis-cli<br>以上命令将打开以下终端：</p><p>redis 127.0.0.1:6379&gt;<br>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><p>flushall ——&gt; 清空整个 Redis 服务器的数据(删除所有数据库的所有 key )</p><p>flushdb ——&gt; 清空当前数据库中的所有 key</p><p>redis 127.0.0.1:6379&gt; ping<br>PONG<br>以上说明我们已经成功安装了redis。</p><p>如果是用apt-get或者yum install安装的redis，可以直接通过下面的命令停止/启动/重启redis</p><p>/etc/init.d/redis-server stop<br>/etc/init.d/redis-server start<br>/etc/init.d/redis-server restart<br>如果是通过源码安装的redis，则可以通过redis的客户端程序redis-cli的shutdown命令来重启redis</p><p>redis-cli -h 127.0.0.1 -p 6379 shutdown<br>如果上述方式都没有成功停止redis，则可以使用终极武器 kill -9</p><p>/usr/local/redis/bin/redis-cli </p><hr><p>=====================================================</p><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>查看输出logs<br>tail -f catalina.out<br>查看tomcat进程<br>ps -ef | grep tomcat</p><hr><p>==================================================<br>腾讯云服务器<br>+———————————————————————-<br>| YJCOM [ EASY CLOUD EASY WEBSITE]” &gt;&gt; $README<br>+———————————————————————-<br>| Copyright (c) 2015 <a href="http://yjcom.com" target="_blank" rel="noopener">http://yjcom.com</a> All rights reserved.<br>+———————————————————————-</p><p>nginx         /usr/local/nginx<br>tomcat6        /var/tomcat/tomcat-6<br>tomcat7        /var/tomcat/tomcat-7<br>tomcat8        /var/tomcat/tomcat-8<br>mysql5.6    /var/lib/mysql</p><p>./tomcat.sh stop|start</p><p>mysql:        service mysql (start|stop|restart)<br>vsftpd:        service vsftpfd (start|stop|restart)<br>nginx:        service nginx (start|stop|restart)</p><p>www ftp directory    /yjdata/www/www/</p><p>change tomcat version for the default site<br>/yjdata/www/www/change_tomcat_version.sh 6|7|8</p><p>change jdk version for the default site<br>/yjdata/www/www/change_jdk_version.sh 1.6|1.7|1.8</p><p>======================================================================</p><hr><p>netstat -ntlp //查看当前所有tcp端口·</p><p>netstat -ntulp |grep 80 //查看所有80端口使用情况·</p><p>netstat -an | grep 3306 //查看所有3306端口使用情况·</p><h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h3><p>登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp -P [port] [user]@[ip]</span><br></pre></td></tr></table></figure><p>get 取得远程服务器上的指定文件</p><p>put 上传本地指定的文件到远程服务器上</p><p>put -r 上传本地指定的文件夹到远程服务器上</p><p>示例:</p><p>get -r ./* /Users/voidcc.com/本地项目目录/</p><p>从远程下载所有文件及文件夹到本地项目目录</p><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><h4 id="查看nginx日志"><a href="#查看nginx日志" class="headerlink" title="查看nginx日志"></a>查看nginx日志</h4><p>导出指定日期到指定文件<br>sed -n ‘/5/Jan/2021/,/6/Jan/2021/p’ access.log&gt;20210105.log</p><h4 id="sed-参数简介"><a href="#sed-参数简介" class="headerlink" title="sed 参数简介"></a>sed 参数简介</h4><figure class="highlight plain"><figcaption><span>：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-e ：直接在命令列模式上进行 sed 的动作编辑；</span><br><span class="line">-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；</span><br><span class="line">-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</span><br><span class="line">-i ：直接修改读取的文件内容，而不是输出到终端。</span><br><span class="line"></span><br><span class="line">动作说明： [n1[,n2]]function</span><br><span class="line">n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』</span><br><span class="line"></span><br><span class="line">function：</span><br><span class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line">p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</span><br></pre></td></tr></table></figure><h4 id="正则元字符"><a href="#正则元字符" class="headerlink" title="正则元字符"></a>正则元字符</h4><p>^ 行首定位符 /^my/ 匹配所有以my开头的行<br>$ 行尾定位符 /my$/ 匹配所有以my结尾的行<br>. 匹配除换行符以外的单个字符 /m..y/ 匹配包含字母m，后跟两个任意字符，再跟字母y的行<br>匹配零个或多个前导字符             /my*/  匹配包含字母m,后跟零个或多个y字母的行<br>[] 匹配指定字符组内的任一字符 /[Mm]y/ 匹配包含My或my的行<br>[^] 匹配不在指定字符组内的任一字符 /[^Mm]y/ 匹配包含y，但y之前的那个字符不是M或m的行<br>(..) 保存已匹配的字符 1,20s/(you)self/\1r/ 标记元字符之间的模式，并将其保存为标签1，之后可以使用\1来引用它<br>&amp; 保存查找串以便在替换串中引用 s/my/&amp;/ 符号&amp;代表查找串。my将被替换为my<br>&lt; 词首定位符 /&lt;my/ 匹配包含以my开头的单词的行</p><blockquote><p>词尾定位符 /my&gt;/ 匹配包含以my结尾的单词的行<br>x{m} 连续m个x /9{5}/ 匹配包含连续5个9的行<br>x{m,} 至少m个x /9{5,}/ 匹配包含至少连续5个9的行<br>x{m,n} 至少m个，但不超过n个x /9{5,7}/ 匹配包含连续5到7个9的行</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://qspinach.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>React学习</title>
    <link href="https://qspinach.github.io/blog/2020/08/23/React%E5%AD%A6%E4%B9%A0/"/>
    <id>https://qspinach.github.io/blog/2020/08/23/React学习/</id>
    <published>2020-08-23T15:45:11.788Z</published>
    <updated>2020-08-23T15:45:11.788Z</updated>
    
    <content type="html"><![CDATA[<center>React学习</center><h2 id="React环境基础搭建与安装"><a href="#React环境基础搭建与安装" class="headerlink" title="React环境基础搭建与安装"></a>React环境基础搭建与安装</h2><ol><li><p>nodejs下载与安装</p><p>安装完成后执行如下指令，确定安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>快速新建react项目</p><p>全局安装create-react-app, 命令行依次输入以下命令，完成react项目的搭建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-react-app</span><br><span class="line"><span class="built_in">cd</span> my-react-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>浏览器输入localhost:3000，即可运行。</p><p>​</p></li></ol><h2 id="ES6语法巩固（待完成）"><a href="#ES6语法巩固（待完成）" class="headerlink" title="ES6语法巩固（待完成）"></a>ES6语法巩固（待完成）</h2><ol><li><p>let &amp; const</p><p>let声明变量，用法类似于var，只是声明的变量只在let命令所在代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>const声明一个只读的常量，一旦声明了，就不能改变。只能在声明的位置后面使用，且不能重复声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1314</span>;</span><br><span class="line">PI = <span class="number">3</span> <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li><li><p>变量的解构赋值</p><p>2.1 数组的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 从数组中提取值，按照对应位置，对变量赋值</span></span><br><span class="line"><span class="keyword">let</span> [foo] = []; <span class="comment">// 变量解构不成功 foo 等于 undefined</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="literal">true</span>] = []; <span class="comment">// 设置x的默认值为true</span></span><br><span class="line"><span class="keyword">let</span> [y = <span class="number">1</span>] = [<span class="literal">null</span>]; <span class="comment">// y值为null。 只有当一个数组成员严格等于undefined，默认值才会生效。即null !== undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>2.2对象的解构赋值</p><p>变量必须与属性同名，才能取到正确的值，与位置无关。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;; <span class="comment">// foo值为"aaa", bar值为"bbb"</span></span><br><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;; <span class="comment">// foo值为"aaa", bar值为"bbb"</span></span><br><span class="line"><span class="keyword">let</span> &#123; x = <span class="number">3</span> &#125; = &#123;&#125;; <span class="comment">// 指定默认值</span></span><br></pre></td></tr></table></figure><p>如果变量名与属性名不一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;; <span class="comment">// baz值为"aaa"</span></span><br></pre></td></tr></table></figure><p>2.3 字符串的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">length</span>: len &#125; = <span class="string">'hello'</span>; <span class="comment">// len值为5</span></span><br></pre></td></tr></table></figure><p>2.4 函数的解构赋值</p><p>函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map遍历</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]].map(<span class="function">(<span class="params">[a, b]</span>) =&gt;</span> a + b); <span class="comment">// [3, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><p>解构使用情况是，大多是对JSON数据的提取，加载模块时，指定需加载模块的方法。</p></li><li><p>字符串的扩展</p><p>includes() 表示是否找到了参数字符串</p><p>startsWith() 表示参数字符串是否在原字符串的头部。</p><p>endsWith() 表示参数字符串是否在原字符串的尾部</p><p>使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>); <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>); <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'wrold'</span>, <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>padStart(), padEnd()</p><p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></table></figure><p>模板字符串</p><p>模板字符串是增强版的字符串，用 (`)标识。可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 2 = 3"</span></span><br><span class="line"></span><br><span class="line"><span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y * <span class="number">2</span>&#125;</span> = <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span></span><br><span class="line"><span class="comment">// "1 + 4 = 5"</span></span><br></pre></td></tr></table></figure></li><li><p>数值的扩展</p><p>Number.isFinite(), Number.isNaN()</p><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的。</p><p><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">15</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">0.8</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(-<span class="literal">Infinity</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'foo'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'15'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">15</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'15'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">true</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">9</span>/<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span> / <span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span> / <span class="string">'true'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限。</p><p><code>Number.isSafeInteger()</code>则是用来判断一个整数是否落在这个范围之内。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="number">9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === -<span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === <span class="number">-9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="string">'a'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">3</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">1.2</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740990</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">9007199254740992</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p> <code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign(<span class="number">-5</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">5</span>) <span class="comment">// +1</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">0</span>) <span class="comment">// +0</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">-0</span>) <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="literal">NaN</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><code>Math.cbrt</code>方法用于计算一个数的立方根。</p><p>​</p></li></ol><h2 id="React基本用法"><a href="#React基本用法" class="headerlink" title="React基本用法"></a>React基本用法</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>在编译之后呢，JSX 其实会被转化为普通的 JavaScript 对象。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  <span class="string">'h1'</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">'greeting'</span>&#125;,</span><br><span class="line">  <span class="string">'Hello, world!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面两种写法相同</p><h3 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h3><p>要将React元素渲染到根DOM节点中，我们通过把它们都传递给 <code>ReactDOM.render()</code> 的方法来将其渲染到页面上。在实际生产开发中，大多数React应用只会调用一次 <code>ReactDOM.render()</code> 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">' '</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">'Harper'</span>,</span><br><span class="line">  lastName: <span class="string">'Perez'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    Hello, &#123;formatName(user)&#125;!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  element,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>React DOM 会比较元素内容先后的不同，在渲染过程中只会更新改变了的部分。</p><h3 id="组件与Props"><a href="#组件与Props" class="headerlink" title="组件与Props"></a>组件与Props</h3><p>组件的定义分为函数定义和类定义，这两种组件在React中是相同的，使用类就允许我们使用其它特性，例如局部状态、生命周期钩子。</p><p>函数定义是最简单的定义方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123; props.name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用class定义组件:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, &#123; this.props.name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件可以引用其它组件，即可以抽象一些层次细节，如按钮，表单，对话框。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Cahal"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Edite"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>当UI中有一部分重复使用过了好多次，或者本身足够复杂，都是可以抽象出一个可复用的组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserInfo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo-name"</span>&gt;</span><br><span class="line">        &#123;props.user.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Props的只读性，一个组件的props是不能被自己修改的，所有的React组件都必须像纯函数使用props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>状态与属性十分相似，但是状态是私有的，完全受控于当前组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;time: &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改state方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  date: new Date()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>State 的更新是异步的,调用<code>setState</code> 组件的state并不会立即改变。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  quantity: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">preState, props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preState.quantity); <span class="comment">// preState先前的状态, props当前最新的属性props</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">quantity</span>: preState.quantity + <span class="number">1</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.quantity) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用<code>setState</code>修改组件状态时，只需要传入发生改变的<code>State</code>，而不是组件完整的<code>State</code>，因为组件<code>State</code>的更新是一个浅合并的过程。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  a: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="react.png" alt="react周期图" title="">                </div>                <div class="image-caption">react周期图</div>            </figure><ul><li><p>Mounting：已插入真实DOM</p><p><code>constructor()</code> 在组件的实例创建时调用，可以初始化state。</p><p><code>componentWillMount()</code> 在组件渲染之前调用，在这里可以修改state不会触发重新渲染。</p><p><code>render()</code> 渲染组件，检查this.state和this.props返回react元素，也可以返回null或false，只能有一个顶级组件，不能改变组件的状态。组件首次加载，组件内部state改变，组件接收到新的props时都会触发render渲染，并且只会渲染改变了的节点。</p><p><code>componentDidMount()</code> 组件渲染完成后调用，在这里初始化DOM节点，可以进行网络请求拉取远端数据。修改state会触发组件的重新渲染。</p></li><li><p>Updating：正在被重新渲染</p><p>props和state的改变会让组件重新渲染</p><p><code>componentWillReceiveProps(nextProps)</code> 组件接收到新的props时调用，新的props作为其参数nextProps使用，在这里可以更改组件的props和state。</p><p><code>shouldComponentUpdate(nextProps, nextState)</code> 组件是否渲染新的props或state，返回false表示跳过后续componentWillUpdate，render，componentDidUpdate方法。在组件的首次渲染和使用forceUpdate()时不会调用此方法。通常不怎么使用此方法。</p><p><code>componentWillUpdate(nextProps, nextState)</code> 在接收到新的props或者state后，进行渲染之前调用，此方法中不允许更新state或props，此时可以修改state。组件初次渲染不调用此方法。 </p><p><code>componentDidUpdate()</code> 完成渲染新的props或state后调用，可在这里操作新的DOM元素。</p></li><li><p>Unmounting：已移除真实DOM</p><p><code>componentWillUnmount()</code> 组件被移除之前调用，在这里执行清理操作，如清除定时器，监听器。</p></li></ul><p>其他：通过extends React.Conponent给组件初始化不会执行getDefaultProps和getInitialState。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化props</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    onClick: <span class="literal">null</span>,</span><br><span class="line">    className: <span class="string">''</span>,</span><br><span class="line">    text: <span class="string">'默认'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化state</span></span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      time: <span class="number">0</span>,</span><br><span class="line">      log: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>forceUpdate()</code> 会导致组件跳过 <code>shouldComponentUpdate()</code> ，直接调用 <code>render()</code>。</p><h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><p>当使用一个ES6定义一个组件时，通常的一个事件处理程序是类上的一个方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;button onClick=<span class="string">"this.handleClick"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>不调用bind(this),使用属性初始化语法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>不使用属性初始化语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"handleClick"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>传递参数给事件处理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(id, e)&#125;&gt;BTN&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.handleClick.bind(this,id)&#125;&gt;BTN&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><h2 id="React进阶"><a href="#React进阶" class="headerlink" title="React进阶"></a>React进阶</h2><h3 id="组件及其交互通信"><a href="#组件及其交互通信" class="headerlink" title="组件及其交互通信"></a>组件及其交互通信</h3><p>父组件向子组件传值，通过 <code>props</code> 属性传递，在父组件给子组件设置 <code>props</code>，然后子组件就可以通过 <code>props</code> 访问到父组件的数据或者方法，这样就搭建起了父子组件间通信的桥梁。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      dataList: [],</span><br><span class="line">      name: <span class="string">'parents'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  logChildName = <span class="function">(<span class="params">cname</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(cname);</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;Child alertHandler=&#123;<span class="keyword">this</span>.logChildName&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>子组件通过父组件传递的方法来传递值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">'Child'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.alertHandler(<span class="keyword">this</span>.state.name);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;show child name&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><p>在react项目中获取数据的工具比较多，比如<code>fetch</code> <code>axios</code> 。一般获取网络请求数据是在<code>componentDidMount()</code>中操作，然后通过<code>promise</code>获取数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Table</span><br><span class="line"><span class="keyword">const</span> urlString = <span class="string">'http://localhost:3000/'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAxios</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      tableData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// get获取数据</span></span><br><span class="line">  getTableData () &#123;</span><br><span class="line">    axios.get(urlString,&#123;</span><br><span class="line">      headers: &#123;&#125;, <span class="comment">// 设置响应头</span></span><br><span class="line">      params: &#123;</span><br><span class="line">        page: <span class="number">1</span>,</span><br><span class="line">        limit: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 得到值</span></span><br><span class="line">      <span class="keyword">return</span> res.data;</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 进行处理</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        tableData: data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.getTableData();</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Table 用于展示tableData */</span></span><br><span class="line">        &#125;</span><br><span class="line">      &lt;Table data=&#123;<span class="keyword">this</span>.state.tableData&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>发送<code>post</code>请求，通过<code>promise</code>处理返回数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> urlString = <span class="string">'http://localhost:3000/'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPostAxios</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      vaule: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更改input的value</span></span><br><span class="line">  handleChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 提交操作</span></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'submit value '</span> + <span class="keyword">this</span>.state.value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// post请求</span></span><br><span class="line">  addName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.post(urlString, &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      headers: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res.data);</span><br><span class="line">    &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      consoloe.log(error);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">          &lt;label&gt;</span><br><span class="line">          name: </span><br><span class="line">            &lt;input type=<span class="string">"text"</span> value=<span class="string">"this.state.value"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>一个项目中get或post请求中的地址主机和端口基本不变，也可以自己再讲axios封装一次，让网络请求业务和react的视图分开方便管理。</p><h3 id="Refs用法"><a href="#Refs用法" class="headerlink" title="Refs用法"></a>Refs用法</h3><p>控制一些<code>DOM</code>原生的效果，如输入框的聚焦效果和选中效果等；触发一些命令式的动画；集成第三方的<code>DOM</code>库。如果要实现的功能可以通过声明式的方式实现，就不要借助Ref。</p><p>如果作用在原生的<code>DOM</code>元素上，通过<code>Ref</code>获取的是<code>DOM</code>元素，可以直接操作<code>DOM</code>的<code>API</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.focusTextInput = <span class="keyword">this</span>.focusTextInput.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  focusTextInput() &#123;</span><br><span class="line">    <span class="comment">// 获取DOM元素后可以直接操作DOM API</span></span><br><span class="line">    <span class="keyword">this</span>.textInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 通过Ref获取DOM元素，再保存在实例变量focusTextInput中</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          ref=&#123;(input) =&gt; &#123; <span class="keyword">this</span>.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"button"</span></span><br><span class="line">          value=<span class="string">"Focus the text input"</span></span><br><span class="line">          onClick=&#123;<span class="keyword">this</span>.focusTextInput&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在子节点上暴露一个特殊的属性，子节点将会获得一个函数属性，并将其作为 <code>ref</code> 属性附加到 DOM 节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;CustomTextInput</span></span><br><span class="line"><span class="regexp">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深入JSX"><a href="#深入JSX" class="headerlink" title="深入JSX"></a>深入JSX</h3><ul><li><p>组件定义必须以大写字母开头</p></li><li><p>不能使用一个普通的表达式作为 React 元素的标签。</p></li><li><p>jsx中的props属性可以是JavaScript表达式，字符串字面量。</p></li><li><p>属性默认值为true。</p></li><li><p>属性扩展</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;<span class="attr">firstName</span>: <span class="string">'Ben'</span>, <span class="attr">lastName</span>: <span class="string">'Hector'</span>&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Greeting</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;  </span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>JSX中的Children可以是字符串字面量，多个JSX元素，JavaScript表达式，回调函数。Booleans、Null、Undefined会被忽略。</p></li></ul><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>react router通过npm安装，命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>引入react-router-dom，设置项目的router 如下，当输入地址为<code>/</code> 页面输出为App组件页面，当地址为<code>/about/id</code> 页面输出为About组件页面，当地址输入为<code>/topics</code> 页面输出为Topics组件页面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./../pages/App'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./../pages/About'</span>;</span><br><span class="line"><span class="keyword">import</span> Topics <span class="keyword">from</span> <span class="string">'./../pages/Topics'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render ()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">'/'</span> component=&#123;App&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/about/:id"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/topics"</span> component=&#123;Topics&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">RouterApp</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><p>获取地址URL参数，通过this.props.match可以获取url参数，params参数。如果地址输入<code>/about/123</code> 。通过params也可以完成页面之间的传值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; url, params &#125; = <span class="keyword">this</span>.props.match;</span><br><span class="line"><span class="built_in">console</span>.log(url); <span class="comment">// /about/123</span></span><br><span class="line"><span class="built_in">console</span>.log(params); <span class="comment">// &#123;id: 123&#125;</span></span><br></pre></td></tr></table></figure><p>当路径未匹配path时应当有404界面。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route component=&#123;NoMatch&#125; /&gt;</span><br></pre></td></tr></table></figure><p>当组件中需要用到跳转时需使用<code>Link</code> 其中的传递的参数可以在<code>props</code> 的<code>location</code> 中获取。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;Link to=&#123;&#123;</span><br><span class="line">          pathname: <span class="string">'/index'</span>,</span><br><span class="line">          search: <span class="string">'?sort=name'</span>,</span><br><span class="line">          hash: <span class="string">'#the-hash'</span>,</span><br><span class="line">          state: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        &gt;跳转to&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>也可以通过函数传值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向详情页传递要传递的值</span></span><br><span class="line">clickHandler(value) &#123;</span><br><span class="line">      browserHistory.push(&#123;</span><br><span class="line">        pathname: <span class="string">'/detail/'</span> + value,</span><br><span class="line">        query: &#123;</span><br><span class="line">         billName: value.brandNm,</span><br><span class="line">         billTittle: value.ticketNm,</span><br><span class="line">         billImg: value.billPicPath,</span><br><span class="line">         billId: value.billId</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如果需要重定向到新的一个地址就可以用<code>Redirect</code> 来实现。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Route, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">&lt;Route exact path=<span class="string">"/"</span> render=&#123;() =&gt; (</span><br><span class="line">  loggedIn ? (</span><br><span class="line">    &lt;Redirect to=<span class="string">"/dashboard"</span>/&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;PublicHomePage/&gt;</span><br><span class="line">  )</span><br><span class="line">)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>传值方式同<code>Link</code> 一样。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect to=&#123;&#123;</span><br><span class="line">  pathname: <span class="string">'/login'</span>,</span><br><span class="line">  search: <span class="string">'?utm=your+face'</span>,</span><br><span class="line">  state: &#123; <span class="attr">referrer</span>: currentLocation &#125;</span><br><span class="line">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><h4 id="其他v3与v4"><a href="#其他v3与v4" class="headerlink" title="其他v3与v4"></a>其他v3与v4</h4><p><a href="https://www.jianshu.com/p/bf6b45ce5bcc" target="_blank" rel="noopener">https://www.jianshu.com/p/bf6b45ce5bcc</a></p><p><a href="https://blog.csdn.net/sinat_17775997/article/details/69218382" target="_blank" rel="noopener">https://blog.csdn.net/sinat_17775997/article/details/69218382</a></p><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>本地安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br></pre></td></tr></table></figure><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --gobal webpack</span><br></pre></td></tr></table></figure><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>资源管理</p><p>css加载，需安装css-loader和style-loader并在module配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123;</span><br><span class="line">         test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">         use: [</span><br><span class="line">           <span class="string">'style-loader'</span>,</span><br><span class="line">           <span class="string">'css-loader'</span></span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>图片加载，需安装配置file-loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'file-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字体加载同样需要安装配置file-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'file-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载数据,如 JSON 文件，CSV、TSV 和 XML。使用csv-loader和xml-loader安装配置即可处理CSV、TSV 和 XML类型的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev csv-loader xml-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'csv-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'xml-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlWebpackPlugin</code> 创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Output Management'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlWebpackPlugin</code> 在每次构建前清理 <code>/dist</code> 文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Output Management'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更容易跟踪错误和警告JavaScript 提供了 <code>source map</code> 功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack-dev-server</code> 提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块热替换是webpack内置的功能，无需进行完全刷新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tree shaking移除 JavaScript 上下文中的未引用代码(dead-code)。从 webpack 4 开始，也可以通过 <code>&quot;mode&quot;</code> 配置选项轻松切换到压缩输出，只需设置为 <code>&quot;production&quot;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"production"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高阶拓展"><a href="#高阶拓展" class="headerlink" title="高阶拓展"></a>高阶拓展</h2><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><h3 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h3><h3 id="Dva"><a href="#Dva" class="headerlink" title="Dva"></a>Dva</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;React学习&lt;/center&gt;

&lt;h2 id=&quot;React环境基础搭建与安装&quot;&gt;&lt;a href=&quot;#React环境基础搭建与安装&quot; class=&quot;headerlink&quot; title=&quot;React环境基础搭建与安装&quot;&gt;&lt;/a&gt;React环境基础搭建与安装&lt;/h2
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://qspinach.github.io/blog/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>随拍图片</title>
    <link href="https://qspinach.github.io/blog/2019/10/23/picture/"/>
    <id>https://qspinach.github.io/blog/2019/10/23/picture/</id>
    <published>2019-10-23T03:30:21.000Z</published>
    <updated>2020-08-23T15:45:11.794Z</updated>
    
    <content type="html"><![CDATA[<p>转载图片请说明出处</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="IMG_20191130_084601.jpg" alt="图片1" title="">                </div>                <div class="image-caption">图片1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载图片请说明出处&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
  
      
    
    </summary>
    
    
    
      <category term="picture" scheme="https://qspinach.github.io/blog/tags/picture/"/>
    
  </entry>
  
</feed>
